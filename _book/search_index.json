[
["index.html", "OES Standard Operating Procedures for The Design and Statistical Analysis of Experiments. Overview Purposes of this document Nature and limitations of this document Help us improve our work! About this document", " OES Standard Operating Procedures for The Design and Statistical Analysis of Experiments. Jake Bowers, Ryan T. Moore, Lula Chen, Paul Testa, Nate Higgins, Oliver McClellan, Miles Williams, Tyler Simko, Bill Schultz November 01, 2023 Overview This document explains how our team, the Office of Evaluation Sciences in the General Services Administration (the OES), tends to do statistical analysis. It also explains why we do what we do.1 The research integrity processes OES follows are already documented on our Evaluation Resources Web Page. For example, on that page we provide templates for our research design and analysis pre-registration process. Here, we instead get into the nitty gritty of our statistical work. Purposes of this document First, this document educates new team members about the decisions past team members have made regarding the design and analysis of the studies fielded so far. It also serves as a place to record decisions for our own future selves, and helps us harness the power that arises from our disciplinary diversity. That is, current and past team members have made decisions about how to approach statistical analyses that may differ from those that are common in any given academic discipline. This document, thus, helps explain why we have landed on those decisions (for now), and also illustrates how to implement them in R. Second, this document records decisions that we have made in the absence of pre-analysis plans, or in the context of circumstances unforeseen by our pre-analysis planning. It should help guide our future experimental design and analysis. However, any given project may encounter reasons to make different decisions than those we describe here. This SOP should be thought of as more of a coordination device than a set of firm requirements. Third, on a related note, this document should help us write better analysis plans and speed our practice of re-analysis. (Our team insists on a blind re-analysis of every study as a quality control for our results before they are reported to our agency partners.) Fourth, and finally, this document should help other teams working to learn about the causal impacts of policy interventions. We hope this contributes to the US government&#x2019;s own work pursuing evidence-based public policy. But we also hope that it helps teams doing work similar to our own in other settings. Nature and limitations of this document We (mostly) focus on randomized field experiments. This document focuses on design and analysis of randomized field experiments. Although we include some discussion about non-randomized studies, often known as observational studies, until now, our team has focused primarily on randomized field experiments. We plan to include more discussion of observational studies over time. We present examples using R As public servants and social and behavioral scientists, we use the R statistical analysis language for this document because it is (a) one of the two industry standards in the field of data science (along with Python), (b) free, open source, and multiplatform, and (c) the standard for advanced methodological work in the statistical sciences as applied to the social and behavioral sciences (the latest new statistical techniques for social and behavioral scientists tend to be developed in R). Of course, many members of our team also use Stata, SAS, SPSS, Python (either in addition to or instead of R). We welcome future additions to this document using those languages as well. Structure of the document Each section of this document will include, if applicable: A description of our approach. A description of how we implement our approach, including functions in R, key arguments that must be entered into the function, and key outputs from the function. A general example using simulated data (perhaps including some evaluation of the tool as compared to other possible choices). Throughout the document, we will be including links to the Glossary and Appendix, clarifying terms or explaining tools and procedures in more depth. This aspect of the SOP is still under-development, but we plan to add more here moving forward. Help us improve our work! Since we hope to improve our analytic workflow with every project, this document should be seen as provisional &#x2014; as a record and a guide for our continuous learning and improvement. We invite comments in the form of Issues or pull requests on Github. There is also a suggestion form available to OES team members. About this document This book was written in bookdown. The complete source is available from GitHub. This version of the book was built with R version 4.2.1 (2022-06-23 ucrt) and the following packages. package version source bfe 2.0 Github (gibbonscharlie/bfe@4eaebc00d12bc427a9c75aec3280c43a0034b416) blockTools 0.6.4 CRAN (R 4.2.3) bookdown 0.7 CRAN (R 4.2.1) coin 1.4-2 CRAN (R 4.2.1) DeclareDesign 1.0.0 CRAN (R 4.2.1) devtools 2.4.4 CRAN (R 4.2.1) estimatr 1.0.0 CRAN (R 4.2.1) future 1.28.0 CRAN (R 4.2.1) future.apply 1.9.1 CRAN (R 4.2.1) here 1.0.1 CRAN (R 4.2.2) ICC 2.4.0 CRAN (R 4.2.0) kableExtra 1.3.4 CRAN (R 4.2.1) katex 1.4.1 https://ropensci.r-universe.dev (R 4.2.3) knitr 1.33 CRAN (R 4.2.1) lmtest 0.9-40 CRAN (R 4.2.1) multcomp 1.4-20 CRAN (R 4.2.1) nbpMatching 1.5.1 CRAN (R 4.2.3) quickblock 0.2.0 CRAN (R 4.2.1) randomizr 0.22.0 CRAN (R 4.2.1) remotes 2.4.2 CRAN (R 4.2.1) ri2 0.4.0 CRAN (R 4.2.2) RItools 0.3-3 CRAN (R 4.2.3) sandwich 3.0-2 CRAN (R 4.2.2) tidyverse 1.3.2 CRAN (R 4.2.2) V8 4.3.3 CRAN (R 4.2.3) withr 2.5.0 CRAN (R 4.2.1) "],
["statistical-and-causal-inference-for-policy-change.html", "Chapter 1 Statistical and causal inference for policy change", " Chapter 1 Statistical and causal inference for policy change Most of the rest of this document dives into the details of our statistical decision making. It assumes that the reader has heard of hypothesis tests and statistical estimators. Here, we explain in very broad terms how tests and estimators are useful for helping the US federal government improve public policy. &#x201C;Evidence-based public policy&#x201D; can refer to both &#x201C;evidence-as-insight&#x201D; (the use of previous scientific literature as input to the design of new policies) and &#x201C;evidence-as-evaluation&#x201D; (the careful design of studies to learn about how and whether a new policy worked) (Bowers and Testa 2019). Our team aims to help government agencies design new policies and learn about how those new ideas work. This document focuses on the learning part of our work. How would we know whether and how a new policy worked? In an ideal and unrealistic case, we would know that a new policy improved the life of a single person, Jake, if we could compare Jake&#x2019;s decisions both under the new policy and under the status quo at the same moment in time. If we saw that Jake&#x2019;s decisions were better under the new policy than under the status quo, we would say that the new policy caused Jake to make better decisions. Since no one can observe Jake in both situations &#x2014; say, making health decisions with and without a new procedure for visiting the doctor &#x2014; researchers try to find at least one other person (or more) who represents how Jake would have acted without being exposed to the new policy. Holland (1986) calls this the &#x201C;fundamental problem of causal inference&#x201D; and explains more formally when we might believe that other people are a good approximations for how Jake would have acted without the new policy. For example, if access to the new policy is randomized, we can claim that that the two groups are good &#x201C;counterfactuals&#x201D; for each other. Our team tends to think about the causal effects of a policy in counterfactual terms. What do statistics have to do with learning about the causal effect of a new policy idea? We use randomized experiments to create groups of people who represent behavior under both the new policy and the status quo. In medical experiments to assess the effectiveness of new treatments, these two groups tend to be called the &#x201C;treatment group&#x201D; and the &#x201C;control group.&#x201D; Social scientists often use that same language even if we are not really providing a new treatment, but are, instead, offering a new communication or decision-making structure. If we pilot a new policy by offering it to people chosen at random, we can claim that the people chosen and the people not chosen represent or &#x201C;stand in for&#x201D; each other. With random assignment of a policy, we can use what we see from one group to learn about what would have happened if the control group had received the new policy instead, or if the treatment group had not. In any given sample we won&#x2019;t know exactly how the treatment group would have behaved if they had been assigned to the control group instead. For example, if we pulled 500 out of 1000 names from a hat and assigned those 500 people to receive treatment, that&#x2019;s just one of many possible sets of 500 people we could have drawn. If we were to do the experiment again, and pulled a different 500 names at random, this second experiment will also have a randomly selected treatment group, but the second 500 people will be at least a little different from the first 500 people. A single experiment offers us some information about the effect of treatment, but we need to ask other questions, too, like &#x201C;How much could our result differ just due to pulling a different 500 people from the hat?&#x201D; But we also need to answer subtler questions like &#x201C;What do you mean by &#x2018;result&#x2019;?&#x201D; or &#x201C;How do I know that this really is a &#x2018;good&#x2019; result rather than a bad result?&#x201D; Questions like those in mind, our team uses statistical theory to produce estimates of the causal effect of a new policy. We also use statistical theory to answer questions like &#x201C;Could the effect really have been zero?&#x201D; or &#x201C;How many people do we need to observe in order to distinguish a positive effect from a zero effect?&#x201D; The rest of this document presents decisions we have made about the particulars of estimators and tests, as well as other tricky decisions that we have had to confront &#x2014; like how we can design experiments using pre-intervention data to make our results as precise as possible. For more on the basics of how statistics helps us answer questions about causal effects, we recommend chapters 1&#x2013;3 of Gerber and Green (2012) (which focuses on randomized experiments) and the first part of Rosenbaum (2017) (which focuses on both experiments and research designs without randomization). Another good treatment comes from the opening chapters of Angrist and Pischke (2009). References "],
["basics-of-experimental-design-and-analysis.html", "Chapter 2 Basics of Experimental Design and Analysis 2.1 Statistical power: Designing Studies that effectively distinguish signal from noise 2.2 Error Rates of Tests 2.3 Bias in Estimators", " Chapter 2 Basics of Experimental Design and Analysis Here, we briefly define and describe some of the characteristics we consider when evaluating statistical procedures. These characteristics guide our decision making in the rest of this guide. Briefly, we want to create research designs that (1) have enough statistical power to tell us something meaningful about the policy interventions that we are piloting. We also want to use statistical tests that will (2) rarely mislead us&#x2014; i.e., will rarely give a false positive result&#x2014; and we want to use estimators (3) without systematic error. These characteristics depend on both the design of the study and the choices we make about computational procedures. We discuss these issues in more depth in other chapters that follow. 2.1 Statistical power: Designing Studies that effectively distinguish signal from noise The research designs we use at OES aim to enhance our ability to distinguish signal from noise: studies with very few observations cannot tell us much about the treatment effect, while studies with very many observations provide a lot of information about the treatment effect. A study which effectively distinguishes signal from noise has excellent &#x201C;statistical power,&#x201D; while a study which cannot do this has low statistical power. The Evidence in Governance and Politics (EGAP) Methods Guide 10 Things You Need to Know about Statistical Power explains more about what statistical power is and how to assess it. Before we field a research design, we assess its statistical power. If we anticipate that the intervention will only make a small change in peoples&#x2019; behavior, then we will need a relatively large number of people in the study: too few people would result in a report saying something like, &#x201C;The new policy might have improved the lives of participants, but we can&#x2019;t argue strongly that this is so because our margin of error is too wide.&#x201D; 2.2 Error Rates of Tests A good statistical test rarely rejects a true hypothesis and often rejects false hypotheses. The EGAP Methods Guide 10 Things to Know about Hypothesis Testing describes the basics of hypothesis tests. It also explains how one might know that a given ppp-value arises from a test with good properties in a given research design. Our team tries to choose testing procedures that are not likely to mislead analysts, both when we make our analysis plans and as we complete our analyses and re-analyses. 2.3 Bias in Estimators A good estimator is not systematically different from the truth, and an even better estimator tends to produce estimates that are close to the truth across different experiments. The difference-in-means between a treatment and control group is a well known unbiased estimator of the average treatment effect within a given experimental sample, so this is often a primary quantity of interest that our team reports. In practice, we usually estimate this using linear regression (Angrist and Pischke 2009). Meanwhile, since we know that the coefficient in a logistic regression of a binary outcome on a treatment indicator and a covariate is a biased estimator of the underlying causal difference in log-odds, we use other approaches when we want to talk about the causal effect of a treatment on log-odds (Freedman 2008b). References "],
["design-based-principles-of-statistical-inference.html", "Chapter 3 Design-Based Principles of Statistical Inference 3.1 An example using simulated data 3.2 Summary: What does a design based approach mean for policy evaluation?", " Chapter 3 Design-Based Principles of Statistical Inference Most policy evaluations using administrative data or surveys report the results of their studies using estimators and hypothesis tests. Although we can never know the true causal effect of a new policy on our beneficiaries, we can provide a best guess (&#x201C;The average amount saved for retirement by people in the treatment group was $1000 more than the average amount in the control group: our estimate of the average treatment effect is $1000&#x201D;). We can also provide a test evaluating the plausibility of a particular hunch or hypothesis. Commonly, these tests evaluate the plausbility of the null hypothesis of no effect (&#x201C;We can reject the null hypothesis at the 5% significance level with p=.02p=.02p=.02&#x201D;). Confidence intervals can be used to summarize hypothesis tests, so we think of them as tests rather than estimators. Now, when we are asked why we used some method for calculating an average treatment effect, ppp-value, or confidence interval, our team has tended to say that our statistical analyses depend on the design of our studies. When applied to randomized experiments, this principle can be written simply as: analyze as you randomize. We provide an example of this principle in practice below. This idea, often known as &#x201C;randomization based&#x201D; or &#x201C;design based&#x201D; inference, was proposed by two of the founders of modern statistics. Jerzy Neyman&#x2019;s 1923 paper showed how to use randomization to learn about what we would currently call &#x201C;average treatment effects&#x201D; (Neyman 1923), and Ronald A. Fisher&#x2019;s 1935 book showed how to use randomization to test hypotheses about what we would currently call &#x201C;treatment effects&#x201D; (Fisher 1935). We use a design based approach because we often know how a study was designed &#x2014; after all, we and our agency collaborators tend to be the ones deciding on the sample size, the experimental arms, and the outcome data to be extracted from administrative databases. There are other ways to justify statistical procedures, and we do not exclude any reasonable approach in our work &#x2014; such as approaches based on theoretical probability models, or &#x201C;asymptotic theory,&#x201D; which is standard in many applied research fields. However, building on what we know we did in a given study has served us well so far, and it thus forms the basis of our decisions in general. 3.1 An example using simulated data Imagine we have a simple randomized experiment where the relationship between outcomes and treatment is shown in Figure 3.1 (we illustrate the first 6 rows in the table below). Notice that, in this simulated experiment, the treatment changes the variability of the outcome in the treated group &#x2014; this is a common pattern when the control group is a status quo policy. ## Read in data for the fake experiment. dat1 &lt;- read.csv(&quot;dat1.csv&quot;) ## Table of the first few observations. knitr::kable(head(dat1[, c(1, 23:27)])) X y0 y1 Z Y id 1 0.000 6.123 0 0.000 1 2 0.000 2.741 0 0.000 2 3 0.000 7.215 0 0.000 3 4 2.056 6.708 0 2.056 4 5 0.000 5.654 1 5.654 5 6 10.409 15.561 0 10.409 6 ## y0 and y1 are the true underlying potential outcomes. with(dat1, {boxplot(list(y0,y1), names=c(&quot;Control&quot;,&quot;Treatment&quot;), ylab=&quot;Outcomes&quot;) stripchart(list(y0,y1), add=TRUE, vertical=TRUE) stripchart(list(mean(y0), mean(y1)), add=TRUE, vertical=TRUE, pch=19, cex=2)}) Figure 3.1: Simulated Experimental Outcomes In this simulated data, we know the true average treatment effect (ATE) because we know both of the underlying true potential outcomes. The control potential outcome, yi&#x2223;Zi=0y_{i|Z_i=0}yi&#x2223;Zi&#x200B;=0&#x200B;, is written in the code as y0, meaning &#x201C;the response person iii would provide if he/she were in the status quo or control group&#x201D;. The treatment potential outcome, yi&#x2223;Zi=1y_{i|Z_i = 1}yi&#x2223;Zi&#x200B;=1&#x200B;, is written in the code as y1, meaing &#x201C;the response person iii would provide if he/she were in the new policy or treatment group.&#x201D; We use ZiZ_iZi&#x200B; to refer to the experimental arm. In this case Zi=0Z_i=0Zi&#x200B;=0 for people in the status quo group and Zi=1Z_i=1Zi&#x200B;=1 for people in the new policy group. (You can click to SHOW the code.) trueATE &lt;- with(dat1, mean(y1) - mean(y0)) trueATE [1] 5.453 Now, we have one realized experiment (defined by randomly assigning half of the people to treatment and half to control). We know that the observed difference of means of the outcome, YYY, between treated and control groups is an unbiased estimator of the true ATE (by virtue of random assignment to treatment). We can calculate this in a few ways: we can just calculate the difference of means, or we can take advantage of the fact that an ordinary least squares linear regression produces the same estimate when we have a binary treatment on the right hand side. ## Y is the observed outcome, Z is the observed treatment. estATE1 &lt;- with(dat1, mean(Y[Z==1]) - mean(Y[Z==0])) estATE2 &lt;- lm(Y~Z, data=dat1)$coef[[&quot;Z&quot;]] c(estimatedATEv1=estATE1, estimatedATEv2=estATE2) estimatedATEv1 estimatedATEv2 4.637 4.637 stopifnot(all.equal(estATE1, estATE2)) This design-based perspective leads us to think differently about how to calculate standard errors (and thus ppp-values and confidence intervals), relative to a more common perspective based on asymptotic theory and sampling from a larger (potentially infinite) population. 3.1.1 How do we calculate randomization-based standard errors? How much would an estimate of the average treatment effect vary as we repeat an experiment on the same group of people multiple times (randomly re-assigning treatment each time)? The standard error of an estimate of the average treatment effect is one answer to this question. Below, we simulate a simple, individual-level experiment to develop intuition about what the standard error is.2 ## A function to re-assign treatment and recalculate the difference of means. ## Treatment was assigned without blocking or other structure, so we ## just permute or shuffle the existing treatment assignment vector. simEstAte &lt;- function(Z,y1,y0){ Znew &lt;- sample(Z) Y &lt;- Znew * y1 + (1-Znew) * y0 estate &lt;- mean(Y[Znew == 1]) - mean(Y[Znew == 0]) return(estate) } ## Set up and perform the simulation sims &lt;- 10000 set.seed(12345) simpleResults &lt;- with(dat1,replicate(sims,simEstAte(Z = Z,y1 = y1,y0 = y0))) seEstATEsim &lt;- sd(simpleResults) ## The standard error of this estimate of the ATE (via simulation) seEstATEsim [1] 0.9256 Although this preceding standard error is intuitive (the standard deviation of the distribution arising from repeating the experiment), more statistics-savvy readers will recognize closed-form standard error estimators like the following.3 If we write TTT as the set of all mmm treated units and CCC as the set of all n&#x2212;mn-mn&#x2212;m non-treated units, we then have: Var^(T)=s2(Yi,i&#x2208;T)m+s2(Yi,i&#x2208;C)(n&#x2212;m)\\widehat{\\mathrm{Var}}(T) = \\frac{s^2(Y_{i,i \\in T})}{m} + \\frac{s^2(Y_{i,i \\in C})}{(n-m)}Var(T)=ms2(Yi,i&#x2208;T&#x200B;)&#x200B;+(n&#x2212;m)s2(Yi,i&#x2208;C&#x200B;)&#x200B; where s2(x)s^2(x)s2(x) is the sample variance such that s2(x)=(1/(n&#x2212;1))&#x2211;i=1n(xi&#x2212;x&#x2C9;)2s^2(x) = (1/(n-1))\\sum^n_{i = 1}(x_i-\\bar{x})^2s2(x)=(1/(n&#x2212;1))&#x2211;i=1n&#x200B;(xi&#x200B;&#x2212;x&#x2C9;)2. Let&#x2019;s compare the results of that simulation above to the standard error this expression produces, along with the true standard error. We can calculate the true standard error of the ATE in this example because we know the actual covariance between potential outcomes (normally we cannot observe this). You can think of the expression above as a feasible standard error, a modified version that is estimable in real datasets and designed to be at least as large as the true standard error on average (i.e., it is designed to be &#x201C;conservative&#x201D;). Although we don&#x2019;t formally write it out here, you can see a method of estimating the true standard error in our code. Among other things, this exercise helps illustrate that the &#x201C;standard deviation of the estimated ATE after repeating the experiment&#x201D; is the same as expressions like the one above which textbooks are more likely to teach. We&#x2019;ll calculate the true SE next. ## True SE (Dunning Chap 6, Gerber and Green Chap 3, or Freedman, Pisani and Purves A-32). ## Requires knowing the true covariance between potential outcomes. N &lt;- nrow(dat1) V &lt;- var(cbind(dat1$y0,dat1$y1)) varc &lt;- V[1,1] vart &lt;- V[2,2] covtc &lt;- V[1,2] nt &lt;- sum(dat1$Z) nc &lt;- N-nt ## Gerber and Green, p.57, equation (3.4) varestATE &lt;- (((varc * nt) / nc) + ((vart * nc) / nt) + (2 * covtc)) / (N - 1) seEstATETrue &lt;- sqrt(varestATE) Then, we&#x2019;ll calculate the feasible standard error represented in the expression above. ## Feasible SE varYc &lt;- with(dat1,var(Y[Z == 0])) varYt &lt;- with(dat1,var(Y[Z == 1])) fvarestATE &lt;- (N/(N-1)) * ( (varYt/nt) + (varYc/nc) ) estSEEstATE &lt;- sqrt(fvarestATE) Note that this feasible SE is not the standard error OLS provides by default, if you were to use a standard OLS regression to calculate a difference-in-means. We&#x2019;ll calculate the OLS SE as well, and include it in our comparison for illustration. ## OLS SE lm1 &lt;- lm(Y~Z, data=dat1) iidSE &lt;- sqrt(diag(vcov(lm1)))[[&quot;Z&quot;]] Lastly, we&#x2019;ll calculate the HC2 standard error, which (Lin 2013) shows to be a randomization-justified SE for OLS. From our design-based perspective, we prefer this method of estimating the standard error. Like the feasible SE above, it should be conservative relative to the true SE. ## Neyman SE (HC2) NeymanSE &lt;- sqrt(diag(vcovHC(lm1, type = &quot;HC2&quot;)))[[&quot;Z&quot;]] These SE estimates in hand, let&#x2019;s review differences between the true standard error, the feasible standard error, the HC2 SE, the standard error arising from direct repetition of the experiment, and the OLS standard error. What we call Neyman SE here (the HC2 OLS SE) is supposed to be conservative relative to the true SE (at least as large or larger on average). We show this to be the case in our example. The Neyman SE is, by design, similar to the feasible SE, and both are larger than the true SE. We also illustrate the accuracy of our SE simulation procedure above as a way of thinking intuitively about what the standard error represents (though such a simulation is generally not possible with real data). Finally, recall that our design involves different outcome variances between the treated group and the control group. We would therefore expect what we are calling the &#x201C;OLD iid&#x201D; SE to be biased on average (though not necessarily guaranteed to be overly conservative or liberal in all cases). Here, it actually underestimates the truth only slightly. But in other circumstances it may perform worse. compareSEs &lt;- c(simSE = seEstATEsim, feasibleSE = estSEEstATE, trueSE = seEstATETrue, olsIIDSE = iidSE, NeymanDesignSE = NeymanSE) sort(compareSEs) olsIIDSE trueSE simSE NeymanDesignSE feasibleSE 0.8930 0.9189 0.9256 1.0387 1.0439 To provide a more reliable comparison of these SE estimation methods, the first code chunk below defines a function to calculate an average treatment effect, the OLS iid SE, and the OLS HC2 (Neyman) SE. The second code chunk below uses this function to calculate several of those SEs for 10000 simulated datasets, averaging across them to provide a better illustration of their relative performance. As expected, OLS underestimates the true SE, while the Neyman (HC2) SE is conservative. The risk of underestimating the SE is that it could lead us to be overconfident when interpreting statistical findings. ## Define a function to calculate several SEs, given potential outcomes and treatment sePerfFn &lt;- function(Z,y1,y0){ Znew &lt;- sample(Z) Ynew &lt;- Znew * y1 + (1-Znew) * y0 lm1 &lt;- lm(Ynew~Znew) iidSE &lt;- sqrt(diag(vcov(lm1)))[[&quot;Znew&quot;]] NeymanSE &lt;- sqrt(diag(vcovHC(lm1,type = &quot;HC2&quot;)))[[&quot;Znew&quot;]] return(c(estATE=coef(lm1)[[&quot;Znew&quot;]], estSEiid=iidSE, estSENeyman=NeymanSE)) } ## Perform a simulation using this function set.seed(12345) sePerformance &lt;- with(dat1, replicate(sims, sePerfFn(Z = Z, y1 = y1, y0 = y0))) ExpectedSEs &lt;- apply(sePerformance[c(&quot;estSEiid&quot;, &quot;estSENeyman&quot;),], 1, mean) c(ExpectedSEs, trueSE=seEstATETrue, simSE=sd(sePerformance[&quot;estATE&quot;,])) estSEiid estSENeyman trueSE simSE 0.8511 0.9574 0.9189 0.9256 3.1.2 How do we calculate randomization-based confidence intervals? When we have a two arm trial (and a relatively large sample size), we can estimate the ATE, calculate design-based standard errors, and then use them to create large-sample justified confidence intervals through either of the following approaches: ## The difference_in_means function comes from the estimatr package. estAndSE1 &lt;- difference_in_means(Y ~ Z, data = dat1) ## Note that coeftest and coefci come from the lmtest package est2 &lt;- lm(Y ~ Z, data = dat1) estAndSE2 &lt;- coeftest(est2, vcov.=vcovHC(est2, type = &quot;HC2&quot;)) estAndCI2&lt;- coefci(est2, vcov.=vcovHC(est2, type = &quot;HC2&quot;), parm = &quot;Z&quot;) estAndSE1 Design: Standard Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF Z 4.637 1.039 4.465 8.792e-05 2.524 6.75 33.12 estAndSE2[&quot;Z&quot;, , drop=FALSE] Estimate Std. Error t value Pr(&gt;|t|) Z 4.637 1.039 4.465 2.147e-05 estAndCI2 2.5 % 97.5 % Z 2.576 6.699 3.2 Summary: What does a design based approach mean for policy evaluation? Let&#x2019;s review some important terms. Hypothesis tests produce ppp-values telling us how much information we have against a null hypothesis. Estimators produce guesses about the size of some causal effect like the average treatment effect (i.e., &#x201C;estimates&#x201D;). Standard errors summarize how our estimates might vary from experiment to experiment by random chance. Confidence intervals tell us which ranges of null hypotheses are more versus less consistent with our data. Recall that ppp-values refer to probability distributions of test statistics under a null hypothesis, while standard errors refer to probability distributions of estimators across repeated experiments. In the frequentist approach to probability, both of these probability distributions arise from some process of repetition. Statistics textbooks often encourage us to imagine that this process of repetition involves repeated sampling from a larger (potentially infinite) population. But most OES work involves a pool of people who do not represent a well-defined population, nor do we tend to have a strong probability model of how these people entered our sample. Instead, we have a known process of random assignment to an experimental intervention. This makes a randomization-based inference approach natural for our work, and helps our work be easiest to explain and interepret for our policy partners. References "],
["randomization-and-design.html", "Chapter 4 Randomization and Design 4.1 Coin flipping randomization versus urn-drawing randomization 4.2 Urn-drawing or complete randomization into 2 or more groups 4.3 Factorial Designs 4.4 Block Random Assignment 4.5 Cluster random assignment 4.6 Other designs 4.7 Assessing randomization (balance testing)", " Chapter 4 Randomization and Design After working together with our agency partners to translate insights from the social and behavioral sciences into potential policy recommendations, we assess those new ideas by observing differences or changes in real world outcomes (usually measured using existing administrative data).4 In most cases, we design a randomized control trial (an RCT) to ensure that the differences or changes we observe are driven by the policy intervention itself. Here, we show examples of the different methods we consider for randomly assigning units to treatment. These form the core of the different types of RCTs that we use to build evidence about the effectiveness of the new policies. 4.1 Coin flipping randomization versus urn-drawing randomization Many discussions of RCTs begin by talking about the intervention being assigned to units (people, schools, offices, districts) &#x201C;by the flip of a coin,&#x201D; or simple random assignment. In other words, each unit&#x2019;s assignment to treatment occurs separately, and there is no ex ante guarantee as to exactly what the final number of treated or control units will be. We rarely use this method in practice, even though it is a useful way to introduce the idea that RCTs guarantee fair access to the new policy. The following code contrasts coin-flipping style random assignment with drawing-from-an-urn style, or complete random assignment (where a fixed number of units are randomly chosen for treatment). Coin-flipping based experiments are still valid and tell us about the underlying counterfactuals, but they can have less statistical power, so we often try to avoid them. Notice that the simple random assignment implemented in the code below results in more observations in the treatment group (group T) than in the control group (group C). Complete random assignment will always assign 5 units to the treatment, 5 to the control. ## Start with a small experiment with only 10 units n &lt;- 10 ## Set a random seed for replicability set.seed(12345) ## Function to add more intuitive labels labelTC &lt;- function(assignments) {ifelse(assignments == 1, &quot;T&quot;, &quot;C&quot;)} ## Simulation using functions from the randomizr package trt_coinflip &lt;- labelTC(simple_ra(n)) trt_urn &lt;- labelTC(complete_ra(n)) ## Coin flipping does not guarantee half and half treated and control. ## Drawing from an urn, guarantees half treated and control. table(trt_coinflip) trt_coinflip C T 3 7 table(trt_urn) trt_urn C T 5 5 ## Alternative approach using base R # set.seed(12345) # trt_coinflip &lt;- labelTC(rbinom(10, size = 1, prob = .5)) # trt_urn &lt;- labelTC(sample(rep(c(1, 0), n / 2))) # table(trt_coinflip) # table(trt_urn) 4.2 Urn-drawing or complete randomization into 2 or more groups We tend to use the randomizr R package (Coppock 2022a) for simple designs rather than the base R sample function because randomizr does some quality control checks. Notice that we implement a check on our code below with the stopifnot command: the code will stop and issue a warning if we didn&#x2019;t actually assign 1/4 of the observations to the treatment condition. Here, we assign the units first to 2 arms with equal probability (Z2armEqual). Then, to show how the code works, we assign them to 2 arms where one arm has only a 14\\frac{1}{4}41&#x200B; probability of receiving treatment (e.g., imagine a design with an expensive intervention). Last, we assign them based on a design with 4 different arms, each with equal probability (e.g., one control group and three different treatments under consideration). We often use ZZZ to refer to the variable recording our intervention arms. N &lt;- nrow(dat1) set.seed(12345) ## Two equal arms dat1$Z2armEqual &lt;- labelTC(complete_ra(N)) ## Two unequal arms: .25 chance of treatment (.75 chance of control0 dat1$Z2armUnequalA &lt;- labelTC(complete_ra(N,prob=.25)) stopifnot(sum(dat1$Z2armUnequalA==&quot;T&quot;)==N/4) dat1$Z2armUnequalB &lt;- labelTC(complete_ra(N,m=N/4)) ## Four equal arms dat1$Z4arms &lt;- complete_ra(N,m_each=rep(N/4,4)) table(Z2armEqual=dat1$Z2armEqual) Z2armEqual C T 50 50 table(Z2armUnequalA=dat1$Z2armUnequalA) Z2armUnequalA C T 75 25 table(Z2armUnequalB=dat1$Z2armUnequalB) Z2armUnequalB C T 75 25 table(Z4arms=dat1$Z4arms) Z4arms T1 T2 T3 T4 25 25 25 25 4.3 Factorial Designs It&#x2019;s possible to test the effects of more than one intervention without losing much statistical power by randomly assigning multiple treatments independently of each other. The simplest design that we use for this purpose is the 2&#xD7;22 \\times 22&#xD7;2 factorial design. For example, in the next table we see that we have assigned 50 observations to each arm of two separate interventions. Since the randomization of treatment1 is independent of treatment2, we can assess the effects of each treatment separately and pay less of a power penalty (unless one of the treatments dramatically increases the variance of the outcome compared to the experiment with only one treatment assigned). ## Two equal arms, adding a second cross treatment dat1$Z2armEqual2 &lt;- labelTC(complete_ra(N)) table(treatment1=dat1$Z2armEqual,treatment2=dat1$Z2armEqual2) treatment2 treatment1 C T C 23 27 T 27 23 Although factorial designs allow us to test more than one intervention at the same time, they tend to provide less statistical power when testing hypotheses about the interaction between the two treatments. If we want to learn about how two different interventions work together, then the sample size requirements will be much larger than if we were satisfied with learning about each treatment separately.5 Note that recent work highlights some important concerns regarding (1) the interpretation of factorial treatment effects and (2) the consequences of omitting interaction terms when estimating separate effects of each treatment (Muralidharan, Romero, and W&#xFC;thrich 2023). In regards to (2), even if the interaction term is not of interest, including it in the estimation model may be important for making correct inferences.6 Meanwhile, in regards to (1), these authors emphasize that a factorial treatment effect from a model without an interaction should be interpreted as a weighted average of interactions with other treatments administered across the sample.7 4.4 Block Random Assignment Statistical power depends not only on the size of the experiment and the strength of the treatment effect, but also on the amount of noise, or non-treatment-related variability, in outcomes. Block-randomized designs can help reduce this noise while simultaneously minimizing estimation error &#x2013; the amount that our particular experiment&#x2019;s estimate differs from the truth. In a block-randomized, or stratified, design, we randomly assign units to the policy intervention within pre-specified groups.8 Suppose we are evaluating whether dedicated navigators can increase the percentage of students living in public housing who complete federal financial aid applications (FAFSA). Our experiment will send navigators to two of four eligible buildings, two of which are large and two of which are small. In a real study we can never know the outcome in all buildings both with and without navigators (the &#x201C;fundamental problem of causal inference&#x201D; from the last chapter). But if we could, we might have the data below: Building Size % FAFSA (No Navigator) % FAFSA (With Navigator) 1 Large 20 60 2 Large 30 70 3 Small 20 30 4 Small 30 40 Mean 25 50 The true average treatment effect for this sample is the average under treatment (i.e., the average treated potential outcome) minus the average under control (i.e., the average control potential outcome): ATE=50&#x2212;25=25\\text{ATE} = 50-25=25ATE=50&#x2212;25=25 percent more applications per building when a navigator is deployed. In a real study, we might randomly allocate two buildings to treatment and two buildings to control. If complete random assignment led to us treating the first two buildings, then we might observe: Building Size Treated % FAFSA (No Navigator) % FAFSA (With Navigator) 1 Large 1 60 2 Large 1 70 3 Small 0 20 4 Small 0 30 Mean 25 65 This yields a treatment effect estimate of 65&#x2212;25=4065-25 = 4065&#x2212;25=40 percent more applications due to the presence of a navigator. This is larger than the true value of 252525. Or, if random assignment led to the other two buildings being treated instead, we might then observe: Building Size Treated % FAFSA (No Navigator) % FAFSA (With Navigator) 1 Large 0 20 2 Large 0 30 3 Small 1 30 4 Small 1 40 Mean 25 35 This, in contrast, yields an estimated treatment effect of 35&#x2212;25=1035-25 = 1035&#x2212;25=10 percentage point more applications due to the navigators &#x2013; now smaller than the true value of 252525. All of the possible (equiprobable) assignments with two treated and two control units, along with their estimated treatment effects, are listed in the table below: Assignments Estimated Effect TTCC 40 CTCT 35 TCCT 25 CTTC 25 TCTC 15 CCTT 10 These possible treatment effect estimates have a mean equal to the true value of 25, illustrating the difference in means is an unbiased estimator. However, some of these estimates are far from the truth, and they have a lot of variability. To design an experiment that better estimates the true value, and does so with more statistical power (less variability), we can randomly assign units within blocks. In general, units should be sorted into different blocks based on their similarity across one or more characteristics that we expect to be correlated with our outcome. Here, blocking implies restricting the possible random assignments to those that have one large and one small building in each treatment group: Assignments Estimated Effect CTCT 35 TCCT 25 CTTC 25 TCTC 15 With this blocked design restricting the random assignments that are possible, we now get an estimate that is no more than 10 percentage points from the truth. Further, our estimates will have less variability (an SD of 8.16 rather than 11.4). This improves the statistical power of our design. For a more realistic example, suppose we are designing an experiment where the sample includes patients from two different hospitals. We might randomly assign patients to treatment and control within each hospital. For instance, we might assign half of the patients in hospital &#x201C;A&#x201D; to treatment and half to control, then do the same in hospital &#x201C;B.&#x201D;9 Below, we have 50 units in hospital &#x201C;A&#x201D; and 50 in hospital &#x201C;B&#x201D;: dat1$blockID &lt;- gl(n = 2, k = N/2, labels = c(&quot;Block A&quot;, &quot;Block B&quot;)) with(dat1,table(blockID=dat1$blockID)) blockID Block A Block B 50 50 We assign half of the units in each hospital to each treatment condition: dat1$Z2armBlocked &lt;- labelTC(block_ra(blocks=dat1$blockID)) with(dat1, table(blockID, Z2armBlocked)) Z2armBlocked blockID C T Block A 25 25 Block B 25 25 If, say, there were fewer people eligible for treatment in hospital &#x201C;A&#x201D; &#x2014; or perhaps the intervention was more expensive in that block &#x2014; we might choose different treatment probabilities for each block. The code below assigns half of the hospital &#x201C;A&#x201D; patients to treatment, but only a quarter of those from hospital &#x201C;B&#x201D;. Again, we also check that this code worked. This approach is an informal version of one of the best practices for writing code in general, called &#x201C;unit testing.&#x201D; See the EGAP Guide to Workflow for more examples. ## Blocked assignment, unequal probability dat1$Z2armBlockedUneqProb &lt;- labelTC(block_ra(blocks=dat1$blockID, block_prob=c(.5,.25))) with(dat1, table(blockID, Z2armBlockedUneqProb)) Z2armBlockedUneqProb blockID C T Block A 25 25 Block B 38 12 ## Unit testing NumTreatedB &lt;- sum(dat1$Z2armBlockedUneqProb==&quot;T&quot; &amp; dat1$blockID==&quot;Block B&quot;) ExpectedNumTreatedB &lt;- sum(dat1$blockID==&quot;Block B&quot;)/4 stopifnot(NumTreatedB==ceiling(ExpectedNumTreatedB) | NumTreatedB==floor(ExpectedNumTreatedB)) Our team tries to implement block-randomized assignment whenever possible in order to increase the statistical power of our experiments. We also often find it useful in cases where different administrative units are implementing the treatment, or when we expect different groups of people to have different reactions to the treatment. 4.4.1 Using only a few covariates to create blocks If we have background information on a few covariates, we can create blocks by hand through a process like the one demonstrated here: ## For example, make three groups from the cov2 variable dat1$cov2cat &lt;- with(dat1, cut(cov2, breaks=3)) table(dat1$cov2cat, exclude=c()) (-7.32,-2.6] (-2.6,2.1] (2.1,6.82] 11 68 21 with(dat1, tapply(cov2, cov2cat, summary)) $`(-7.32,-2.6]` Min. 1st Qu. Median Mean 3rd Qu. Max. -7.30 -5.03 -3.66 -4.14 -3.01 -2.77 $`(-2.6,2.1]` Min. 1st Qu. Median Mean 3rd Qu. Max. -2.3916 -0.7630 -0.0194 -0.0218 0.7592 2.0864 $`(2.1,6.82]` Min. 1st Qu. Median Mean 3rd Qu. Max. 2.13 2.46 2.95 3.24 3.68 6.80 ## And we can make blocks that are the same on two covariates dat1$cov1bin &lt;- as.numeric(dat1$cov1&gt;median(dat1$cov1)) # Binarize cov1 dat1$blockV2 &lt;- droplevels(with(dat1, interaction(cov1bin, cov2cat))) table(dat1$blockV2, exclude=c()) 0.(-7.32,-2.6] 1.(-7.32,-2.6] 0.(-2.6,2.1] 1.(-2.6,2.1] 0.(2.1,6.82] 1.(2.1,6.82] 7 4 38 30 5 16 ## And then assign within these blocks set.seed(12345) dat1$ZblockV2 &lt;- labelTC(block_ra(blocks = dat1$blockV2)) with(dat1, table(blockV2, ZblockV2, exclude=c())) ZblockV2 blockV2 C T 0.(-7.32,-2.6] 4 3 1.(-7.32,-2.6] 2 2 0.(-2.6,2.1] 19 19 1.(-2.6,2.1] 15 15 0.(2.1,6.82] 2 3 1.(2.1,6.82] 8 8 4.4.2 Multivariate blocking using many covariates If instead we have many background variables, we can increase precision by thinking about the problem of blocking as one of matching, or creating sets of units which are as similar as possible overall, across the entire set of covariates (Moore 2012; Moore and Schnakenberg 2016). Here we show two approaches. Creating pairs: ## Using the blockTools package mvblocks &lt;- block(dat1, id.vars=&quot;id&quot;, block.vars=c(&quot;cov1&quot;,&quot;cov2&quot;), algorithm=&quot;optimal&quot;) dat1$blocksV3 &lt;- createBlockIDs(mvblocks, data=dat1, id.var = &quot;id&quot;) dat1$ZblockV3 &lt;- labelTC(block_ra(blocks = dat1$blocksV3)) ## Just show the first ten pairs with(dat1,table(blocksV3,ZblockV3,exclude=c()))[1:10,] ZblockV3 blocksV3 C T 1 1 1 2 1 1 3 1 1 4 1 1 5 1 1 6 1 1 7 1 1 8 1 1 9 1 1 10 1 1 Creating larger blocks: ## Using the quickblock package distmat &lt;- distances(dat1, dist_variables = c(&quot;cov1bin&quot;, &quot;cov2&quot;), id_variable = &quot;id&quot;, normalize=&quot;mahalanobiz&quot;) distmat[1:5,1:5] 1 2 3 4 5 1 0.0000 1.0697 0.3453 0.14026 0.14827 2 1.0697 0.0000 1.4150 0.92947 0.92146 3 0.3453 1.4150 0.0000 0.48555 0.49356 4 0.1403 0.9295 0.4856 0.00000 0.00801 5 0.1483 0.9215 0.4936 0.00801 0.00000 quantile(as.vector(distmat), seq(0,1,.1)) 0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% -3.13279 -0.60902 -0.22924 -0.02745 0.09799 0.28989 0.68065 1.23306 1.76838 2.00726 2.91687 ## The caliper argument helps prevent ill-matched points mvbigblock &lt;- quickblock(distmat, size_constraint = 6L, caliper = 2.5) ## Look for missing points table(mvbigblock,exclude=c()) # One point dropped due to caliper mvbigblock 0 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;NA&gt; 7 6 6 6 6 6 7 7 8 8 9 7 6 10 1 dat1$blocksV4 &lt;- mvbigblock dat1$notblocked &lt;- is.na(dat1$blocksV4) dat1$ZblockV4[dat1$notblocked==F] &lt;- labelTC(block_ra(blocks = dat1$blocksV4)) with(dat1, table(blocksV4, ZblockV4, exclude=c()))[1:10,] ZblockV4 blocksV4 C T &lt;NA&gt; 0 4 3 0 1 3 3 0 2 3 3 0 3 3 3 0 4 3 3 0 5 3 3 0 6 4 3 0 7 4 3 0 8 4 4 0 9 4 4 0 It&#x2019;s worth pausing to examine the differences within blocks. We&#x2019;ll focus on the proportion of people in category &#x201C;1&#x201D; on the binary covariate (notice that the blocks are homogeneous on this covariate), as well as the difference between the largest and smallest value of the continuous covariate. This table also illustrates that, due to our use of a caliper when calling quickblock above, one observation was not included in treatment assignment. blockingDescEval &lt;- dat1 %&gt;% group_by(blocksV4) %&gt;% summarize( cov2diff = max(abs(cov2)) - min(abs(cov2)), cov1 = mean(cov1bin), count_in_block = n() ) blockingDescEval # A tibble: 15 &#xD7; 4 blocksV4 cov2diff cov1 count_in_block &lt;qb_blckn&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; 1 0 4.54 0 7 2 1 0.417 0 6 3 2 3.13 1 6 4 3 0.251 0 6 5 4 1.16 1 6 6 5 0.986 0 6 7 6 0.537 1 7 8 7 3.63 0 7 9 8 0.980 0 8 10 9 0.966 1 8 11 10 0.691 1 9 12 11 0.714 1 7 13 12 0.834 1 6 14 13 0.671 0 10 15 NA 0 1 1 4.5 Cluster random assignment We often implement a new policy intervention at the level of some group of people &#x2014; like a doctor&#x2019;s practice, or a building, or some other administrative unit. Even though we have 100 units in our example data, imagine now that they are grouped into 10 buildings, and the policy intervention is at the building level. Below, we assign 50 of those units to treatment and 50 to control. Everyone in each building has the same treatment assignment. ## Make an indicator for cluster membership ndat1 &lt;- nrow(dat1) dat1$buildingID &lt;- rep(1:(ndat1/10), length=ndat1) set.seed(12345) dat1$Zcluster &lt;- labelTC(cluster_ra(cluster=dat1$buildingID)) with(dat1, table(Zcluster, buildingID)) buildingID Zcluster 1 2 3 4 5 6 7 8 9 10 C 10 0 10 10 0 0 0 0 10 10 T 0 10 0 0 10 10 10 10 0 0 Cluster randomized designs raise new questions about estimation, testing, and statistical power. We describe our approaches to estimation and power analysis of cluster randomized designs in the next chapter. 4.6 Other designs Our team has also employed stepped-wedge style designs, saturation designs aimed at discovering whether the effects of the experimental intervention are communicated across people (via some spillover or network mechanism), and designs where we try to isolate certain experimental units (like buildings) from each other so that we can focus our learning about the effects of the intervention in isolation (rather than the effects when people can communicate with each other about the intervention). We may discuss some of these in more detail in later versions of this guide. 4.7 Assessing randomization (balance testing) If we have covariates, we can evaluate the implementation of a random assignment procedure by testing the hypothesis that the treatment-vs-control differences in covariates, or differences across treatment arms, are consistent with our intended randomization strategy. Also, in the absence of covariates, we can at least assess whether the number of units assigned to each arm (conditional on other design features, such as blocking or stratification) is consistent with our intended strategy. We provide an example below with a binary treatment, a continuous outcome, and 10 covariates. In this case we use the d2d^2d2 omnibus balance test function xBalance() in the package RItools (see Hansen and Bowers 2008; Bowers, Fredrickson, and Hansen 2016). The overall ppp-value below shows us that this test provides little evidence against the null hypothesis that treatment (ZZZ) really was assigned at random &#x2014; at least in terms of the relationships between treatment assignment and the two covariates. The test statistic here is a summary measure of mean differences across each covariate. Keep in mind that the overall or &#x201C;omnibus&#x201D; nature of this test is key. If we had many covariates or many observations, it would easy to discover one or a few covariates with individual differences-in-means that differ detectably from zero due to random chance (rather than real implementation problems). That is, in a well-operating experiment, we would expect some baseline imbalances for individual covariates &#x2013; roughly 5 in 100. The value of an omnibus test is that it should not be so easily misled by these chance false positives. randAssessV1 &lt;- balanceTest(Z~cov1+cov2, data=dat1) randAssessV1$overall[,] chisquare df p.value -- 1.998 2 0.3683 We can also assess the implementation of block-randomized assignment: randAssessV3 &lt;- balanceTest(ZblockV3~cov1+cov2+strata(blocksV3), data=dat1) randAssessV3$overall[,] chisquare df p.value blocksV3 2.8342 2 0.2424 -- 0.1365 2 0.9340 Lastly, it is possible to assess randomization under both blocked and clustered random assignment using a regression model like the following, where strata(blockID) and cluster(clusterID) refer to block and cluster fixed effects (FEs), respectively. Z ~ cov1 + cov2 + strata(blockID) + cluster(clusterID) Again, a test statistic summarizing the estimated differences across covariates would then be used to calculate a p-value. This approach, implemented for instance by the RItools package, works well for experiments that are not overly small. In a very small experiment (with relatively few clusters) we might estimate this same regression model, but we would not compare our test statistic to the &#x3C7;2\\chi^2&#x3C7;2 sampling distribution to calculate a p-value. Instead, we would perform a permutation-based test (see the previous chapter). We sometimes prefer not use FFF-tests or Likelihood Ratio tests to assess randomization. See Hansen and Bowers (2008) for some evidence that a test based on randomization-inference (like the d2d^2d2 test developed in that article) maintains appropriate false positive rates better than the sampling- or likelihood-justified FFF and likelihood ratio tests. 4.7.1 What to do with &#x201C;failed&#x201D; randomization assessments? Observing a ppp-value of less than .05 in an omnibus test like the one above ought to trigger extra scrutiny about implementation and/or how the data were recorded. For example, we might respond by contacting our agency partner to learn more about how random numbers were generated or the code was used (particularly if we didn&#x2019;t perform the random assignment ourselves). In many circumstances, this follow-up investigation might indicate that random assignment was implemented correctly, and that our understanding of the design or the data was simply incorrect. But sometimes, the follow-up investigation may not turn up any misunderstandings at all. In those situations, we will tend to assume that our rejection of the null hypothesis of appropriate random assignment was a false positive (consider that we would expect to see about 5 such errors in every 100 experiments). If our rejection of the null hypothesis appears to be driven by one or more covariates that are substantively important &#x2014; say, the variable age looks very imbalanced between treated and control groups in a health-related randomized trial &#x2014; then we might present both the unadjusted results and a separate set of results that adjust for the covariate(s) in question (e.g., through a stratified difference-in-means estimator, or by using them as controls in a linear regression). Importantly, under a chance rejection of the null (i.e., a false positive) we would not want to treat the adjusted estimate as our primary finding &#x2014; in such a situation, the adjusted estimate would be biased while the unadjusted estimate would not. However, large differences between the adjusted and unadjusted estimates might help us interpret our findings: estimating separate effects within different age groups, for example, might tell us something useful about the particular context of a study and inform the conclusions we draw. 4.7.2 Minimizing the chances of &#x201C;failed&#x201D; randomization Our preference for block-randomization helps us avoid these problems. We can also restrict random assignments in more flexible ways that minimize opportunities for error even more. That said, we prefer not to rely on re-randomization &#x2014; one of the other possible restricted randomization options &#x2014; in the interests of minimizing the complexity of our analyses. But since we adopt a randomization-based approach to the analysis of experiments, we can easily (in concept) estimate causal effects under a wide variety of random assignment strategies. References "],
["analysis-choices.html", "Chapter 5 Analysis Choices 5.1 Completely or Urn-Draw Randomized Trials 5.2 Covariance adjustment (the use of background information to increase precision) 5.3 How to choose covariates for covariance adjustment? 5.4 Block-randomized trials 5.5 Cluster-randomized trials", " Chapter 5 Analysis Choices We&#x2019;ve organized our discussion of analysis tactics in this chapter by a study&#x2019;s design. After all, different study designs often require different analyses. But there are a few general tactics that we use to ensure that we can make transparent, valid, and statistically precise statements about the results of our research. We&#x2019;ll start this chapter by discussing those. First, the nature of the data that we expect to see from a given experiment informs our analysis plans. For example, we may make some choices based on the nature of the outcome &#x2014; a binary outcome, a symmetrically distributed continuous outcome, and a heavily skewed continuous outcome each could each call for different analytical approaches. Second, we tend to ask three different questions in each of our studies, and we answer them with different statistical procedures: Can we detect an effect in our experiment? (We use hypothesis tests to answer this question.) What is our best guess about the size of the effect of the experiment? (We estimate the average treatment effect of our interventions to answer this question.) How precise is our guess? (We report confidence intervals or standard errors to answer this question.) Finally, in the Analysis Plans that we post online before receiving outcome data for a project, we try to anticipate many common decisions involved in data analysis &#x2014; how we will treat missing data, how we will rescale, recode, and combine columns of raw data, etc. We touch on some of these topics in more detail below, and will cover others in a future chapter on Working with Data. 5.1 Completely or Urn-Draw Randomized Trials 5.1.1 Two arms 5.1.1.1 Continuous outcomes In a completely randomized trial where outcomes take on many levels (units like times, counts of events, dollars, percentages, etc.) we generally assess the weak null hypothesis of no average effects, estimate an average treatment effect, and may also assess the sharp null hypothesis of no effect for any unit using some test statistic beside a difference-in-means.10 This last assessment allows us to check on whether our choice to focus on mean differences matters for our substantive interpretation of the results. 5.1.1.1.1 Estimating the average treatment effect and testing the weak null of no average effects We show the kind of code we use for these purposes here. Below, Y is the outcome variable and Z is an indicator of the assignment to treatment. ## This function comes from the estimatr package estAndSE1 &lt;- difference_in_means(Y ~ Z,data = dat1) print(estAndSE1) Design: Standard Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF Z 4.637 1.039 4.465 8.792e-05 2.524 6.75 33.12 Notice that the standard errors that we use are not the default OLS errors: estAndSE1OLS &lt;- lm(Y~Z,data=dat1) summary(estAndSE1OLS)$coef Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 2.132 0.4465 4.775 6.283e-06 Z 4.637 0.8930 5.193 1.123e-06 The standard errors we prefer reflect repeated randomization from a fixed experimental pool. This is known as the HC2 standard error. Lin (2013) and Samii and Aronow (2012) show that the standard error estimator of an unbiased average treatment effect within a &#x201C;finite-sample&#x201D; or design-based framework (i.e., the Neyman standard error; see Chapter 3) is equivalent to the HC2 standard error. These SEs are produced by default by the estimatr package&#x2019;s function difference_in_means() and the lmtest package&#x2019;s functions coeftest() and coefci(). They can also be produced using the vcovHC() function from the sandwich package. Our preference for HC2 errors follows from their design-based justification, but many researchers encounter them as one of several methods of correcting OLS standard errors for heteroscedasticity. Essentially, this means that the variance of the regression model&#x2019;s error term is not constant across observations.11 When using OLS to analyze data from a two-arm randomized trial, heteroscedasticity might appear because the variance of the outcome is different in the treatment and control groups. This is common in practice. 5.1.1.1.2 Testing the sharp null of no effects We may assess the sharp null of no effects via direct permutation as a check on the assumptions underlying the calculations and statistical inferences above. We tend to use a ttt-statistic as our test statistic here to parallel the above tests. But we could use a rank-based test statistic instead if we were concerned about long-tails (i.e., skew) reducing statistical power. Below, we show how to perform these tests using two different R packages: coin, and ri2. First the coin package (Hothorn et al. 2021): ## The coin package test1coinT &lt;- oneway_test(Y~factor(Z),data=dat1,distribution=approximate(nresample=1000)) test1coinT Approximative Two-Sample Fisher-Pitman Permutation Test data: Y by factor(Z) (0, 1) Z = -4.6, p-value &lt;0.001 alternative hypothesis: true mu is not equal to 0 test1coinR&lt;- oneway_test(rankY~factor(Z),data=dat1,distribution=approximate(nresample=1000)) test1coinR Approximative Two-Sample Fisher-Pitman Permutation Test data: rankY by factor(Z) (0, 1) Z = -4.9, p-value &lt;0.001 alternative hypothesis: true mu is not equal to 0 test1coinWR &lt;- wilcox_test(Y~factor(Z),data=dat1,distribution=approximate(nresample=1000)) test1coinWR Approximative Wilcoxon-Mann-Whitney Test data: Y by factor(Z) (0, 1) Z = -4.9, p-value &lt;0.001 alternative hypothesis: true mu is not equal to 0 Next, the ri2 package (Coppock 2022b): ## The ri2 package thedesign1 &lt;- randomizr:::declare_ra(N=ndat1,m=sum(dat1$Z)) thedesign1 Random assignment procedure: Complete random assignment Number of units: 100 Number of treatment arms: 2 The possible treatment categories are 0 and 1. The number of possible random assignments is approximately infinite. The probabilities of assignment are constant across units: prob_0 prob_1 0.75 0.25 test1riT &lt;- conduct_ri(Y ~ Z, declaration = thedesign1, sharp_hypothesis = 0, data = dat1, sims = 1000) tidy(test1riT) term estimate p.value 1 Z 4.637 0 test1riR &lt;- conduct_ri(rankY ~ Z, declaration = thedesign1, sharp_hypothesis = 0, data = dat1, sims = 1000) tidy(test1riR) term estimate p.value 1 Z 30.8 0 5.1.1.2 Binary outcomes We tend to focus on differences in percentage points when we are working with binary outcomes, usually estimated via OLS linear regression. A statement like &#x201C;the effect was a 5 percentage point increase&#x201D; has made communication with partners easier than a discussion in terms of log odds or odds ratios. In addition to difficulties in interpretation and communication, we also avoid logistic regression coefficients because of the bias problem noticed by Freedman (2008b) in the case of covariance adjustment or more complicated research designs. 5.1.1.2.1 Estimating the average treatment effect and testing the weak null of no average effects We can estimate effects (and produce standard errors) for differences of proportions using the same process as above. The average treatment effect estimate here represents the difference in the proportions of positive responses (i.e., Y=1Y=1Y=1) between treatment conditions. The standard error is still valid because it is based on the design of the study and not the distribution of the outcomes. ## Make some binary outcomes dat1$u &lt;- runif(ndat1) dat1$v &lt;- runif(ndat1) dat1$y0bin &lt;- ifelse(dat1$u&gt;.5, 1, 0) # control potential outcome dat1$y1bin &lt;- ifelse((dat1$u+dat1$v) &gt;.75, 1, 0) # treated potential outcomes dat1$Ybin &lt;- with(dat1, Z*y1bin + (1-Z)*y0bin) truePropDiff &lt;- mean(dat1$y1bin) - mean(dat1$y0bin) ## Estimate and view the difference in proportions estAndSE2 &lt;- difference_in_means(Ybin~Z,data=dat1) estAndSE2 Design: Standard Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF Z 0.04 0.1168 0.3425 0.7337 -0.1959 0.2759 40.93 When we have an experiment that includes a treatment and control group with binary outcomes, and when we are estimating the ATE, the standard error from a difference in proportions test is the same as the Neyman standard error (and therefore the HC2 error). In contrast, the standard error from a regular OLS regression with a binary outcome &#x2014; sometimes called a linear probability model &#x2014; will be at least slightly incorrect due to inherent heteroscecdasticity (Angrist and Pischke 2009). To see some logic for this, first consider that difference-in-proportion standard errors are estimated with the following equation: SE^prop=p1(1&#x2212;p1)n1+p2(1&#x2212;p2)n2\\widehat{SE}_{prop} = \\sqrt{\\frac{p_{1}(1-p_{1})}{n_{1}}+\\frac{p_{2}(1-p_{2})}{n_{2}}}SEprop&#x200B;=n1&#x200B;p1&#x200B;(1&#x2212;p1&#x200B;)&#x200B;+n2&#x200B;p2&#x200B;(1&#x2212;p2&#x200B;)&#x200B;&#x200B; n1n_1n1&#x200B; is the size of the group assigned treatment, n2n_2n2&#x200B; is the size of the group assigned control, p1p_1p1&#x200B; is the proportion of &#x201C;successes&#x201D; in the group assigned treatment, and p2p_2p2&#x200B;iss the proportion of &#x201C;successes&#x201D; in the group assigned control. Notice that the numerator in the fractions above represents the variance of the proportion in each treatment group. Compare this with the Neyman standard error equation (Lin 2013):12 SE^Neyman=Var(Yt)n1+Var(Yc)n2\\widehat{SE}_{Neyman} = \\sqrt{\\frac{\\mathrm{Var}(Y_{t})}{n_1}+\\frac{\\mathrm{Var}(Y_{c})}{n_2}}SENeyman&#x200B;=n1&#x200B;Var(Yt&#x200B;)&#x200B;+n2&#x200B;Var(Yc&#x200B;)&#x200B;&#x200B; YcY_cYc&#x200B; is the vector of observed outcomes under control, and YtY_tYt&#x200B; is the vector of observed outcomes under treatment. This equation indicates that we use the observed variances in each treatment group to estimate the Neyman standard error for a difference in means. The code below compares the various standard error estimators discussed here. nt &lt;- sum(dat1$Z) nc &lt;- sum(1-dat1$Z) ## 2. Find SE for difference of proportions. p1 &lt;- mean(dat1$Ybin[dat1$Z==1]) p0 &lt;- mean(dat1$Ybin[dat1$Z==0]) se1 &lt;- (p1*(1-p1))/nt se0 &lt;- (p0*(1-p0))/nc se_prop &lt;- round(sqrt(se1 + se0), 4) ## 3. Find Neyman SE varc_s &lt;- var(dat1$Ybin[dat1$Z == 0]) vart_s &lt;- var(dat1$Ybin[dat1$Z == 1]) se_neyman &lt;- round(sqrt((vart_s/nt) + (varc_s/nc)), 4) ## 4. Find OLS SE simpOLS &lt;- lm(Ybin~Z,dat1) se_ols &lt;- round(coef(summary(simpOLS))[&quot;Z&quot;, &quot;Std. Error&quot;], 2) ## 5. Find Neyman SE (which are the HC2 SEs) se_neyman2 &lt;- coeftest(simpOLS,vcov = vcovHC(simpOLS,type=&quot;HC2&quot;))[2,2] se_neyman3 &lt;- estAndSE2$std.error ## 6. Show SEs se_compare &lt;- as.data.frame(cbind(se_prop, se_neyman, se_neyman2, se_neyman3, se_ols)) rownames(se_compare) &lt;- &quot;SE(ATE)&quot; colnames(se_compare) &lt;- c(&quot;diff in prop&quot;, &quot;neyman1&quot;,&quot;neyman2&quot;,&quot;neyman3&quot;, &quot;ols&quot;) print(se_compare) diff in prop neyman1 neyman2 neyman3 ols SE(ATE) 0.1148 0.1168 0.1168 0.1168 0.12 5.1.1.2.2 Testing the sharp null of no effects With a binary treatment and a binary outcome, we could test hypothesis that outcomes are totally independent of treatment assignment using what is called Fisher&#x2019;s exact test. We can also use the permutation-based approaches above to produce results that do not rely on asymptotic assumptions. Below we show how Fisher&#x2019;s exact test, the Exact Cochran-Mantel-Haenszel test, and the Exact &#x3C7;\\chi&#x3C7;-squared test produce the same answers. test2fisher &lt;- fisher.test(x=dat1$Z,y=dat1$Ybin) print(test2fisher) Fisher&apos;s Exact Test for Count Data data: dat1$Z and dat1$Ybin p-value = 0.8 alternative hypothesis: true odds ratio is not equal to 1 95 percent confidence interval: 0.4304 3.2617 sample estimates: odds ratio 1.173 test2chisq &lt;- chisq_test(factor(Ybin)~factor(Z),data=dat1,distribution=exact()) print(test2chisq) Exact Pearson Chi-Squared Test data: factor(Ybin) by factor(Z) (0, 1) chi-squared = 0.12, p-value = 0.8 test2cmh &lt;- cmh_test(factor(Ybin)~factor(Z),data=dat1,distribution=exact()) print(test2cmh) Exact Generalized Cochran-Mantel-Haenszel Test data: factor(Ybin) by factor(Z) (0, 1) chi-squared = 0.12, p-value = 0.8 A difference-in-proportions test can also be performed directly (rather than relying on OLS to approximate this). In that case, the null hypothesis is tested while using a binomial distribution (rather than a Normal distribution) to approximate the underlying randomization distribution. In reasonably-sized samples, both approximations perform well. mat &lt;- with(dat1,table(Z,Ybin)) matpt&lt;-prop.test(mat[,2:1]) matpt 2-sample test for equality of proportions with continuity correction data: mat[, 2:1] X-squared = 0.013, df = 1, p-value = 0.9 alternative hypothesis: two.sided 95 percent confidence interval: -0.2917 0.2117 sample estimates: prop 1 prop 2 0.52 0.56 5.1.2 Multiple arms Multiple treatment arms can be analyzed as above, except that we now have more than one comparison between a treated group and a control group. Such studies raise both substantive and statistical questions about multiple testing (or &#x201C;multiple comparisons&#x201D;). For example, the difference_in_means function asks which average treatment effect it should estimate, and it only presents one comparison at a time. We could compare the treatment T2 with the baseline outcome of T1. But we could also compare both of T2 and T3 with T1 at the same time, as in the second set of results (lm_robust implements the same standard errors as difference_in_means, but allows for more flexible model specification). estAndSE3 &lt;- difference_in_means(Y~Z4arms,data=dat1,condition1=&quot;T1&quot;,condition2=&quot;T2&quot;) print(estAndSE3) Design: Standard Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF Z4armsT2 0.7329 1.298 0.5647 0.5749 -1.877 3.343 47.67 estAndSE3multarms &lt;- lm_robust(Y~Z4arms,data=dat1) print(estAndSE3multarms) Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF (Intercept) 2.5541 0.8786 2.9070 0.004532 0.8101 4.298 96 Z4armsT2 0.7329 1.2979 0.5647 0.573593 -1.8433 3.309 96 Z4armsT3 0.1798 1.1582 0.1552 0.876956 -2.1192 2.479 96 Z4armsT4 2.0372 1.2353 1.6491 0.102393 -0.4149 4.489 96 In this case, we could make ((4&#xD7;4)&#x2212;4)/2)=6((4 \\times 4)-4)/2)=6((4&#xD7;4)&#x2212;4)/2)=6 different possible comparisons between pairs of treatment groups. Consider that if there were really no effects of any treatment, and if we chose to reject the null at the standard significance threshold of &#x3B1;=.05\\alpha=.05&#x3B1;=.05, we would actually claim that there was at least one effect more than 5% of the time. 1&#x2212;(1&#x2212;.05)6=.271 - ( 1 - .05)^6 = .271&#x2212;(1&#x2212;.05)6=.27, or 27% of the time, we would make a false positive error, claiming an effect existed when it did not. In general, our analyses of studies with multiple arms should reflect the fact that we are making multiple comparisons. Two points are worth emphasizing here. First, the family-wise error rate (FWER) of these tests will differ from the individual error rate of single test. In short, testing more than one hypothesis increases the chance of making at least one Type I error (i.e., incorrectly rejecting a true null hypothesis). Suppose instead of testing a single hypothesis at a conventional significance level of &#x3B1;=0.05\\alpha = 0.05&#x3B1;=0.05 we tested two hypothesis at &#x3B1;=0.05\\alpha = 0.05&#x3B1;=0.05. The probability of retaining both hypotheses is (1&#x2212;&#x3B1;)2=.9025(1-\\alpha)^2 = .9025(1&#x2212;&#x3B1;)2=.9025 and the probability of rejecting at least one of these hypotheses is 1&#x2212;(1&#x2212;&#x3B1;)2=.09751-(1-\\alpha)^2 = .09751&#x2212;(1&#x2212;&#x3B1;)2=.0975 &#x2014; almost double our stated significance threshold of &#x3B1;=0.05\\alpha = 0.05&#x3B1;=0.05. Second, multiple tests will often be correlated, and corrections for multiple testing should recognize these relationships &#x2014; importantly, accounting for this correlation will penalize multiple testing less! When we say that tests are &#x201C;correlated,&#x201D; we mean that there is some relationship between the test statistics (e.g., a student&#x2019;s t-statistic, or a &#x3C7;2\\chi^{2}&#x3C7;2 statistic) used to perform statistical inference in each case. In other words, it means that the test statistics are jointly distributed &#x2014; when one test statistic is higher, the other will tend to be higher as well.13 That issue in mind, our default recommendations for multi-arm trials are as follows: First, decide on a focal, confirmatory comparison for the entire evaluation: say, control/status quo versus receiving any version of the treatment. Such a test would likely have more statistical power that a test that evaluates each arm separately, and would also have a correctly controlled false positive rate. This would then serve as the primary confirmatory finding we report. Next, we perform the rest of the comparisons as exploratory analyses without multiple testing adjustment &#x2014; i.e., as analyses that may inform future projects and give hints about where we might be seeing more or less of an effect, but which cannot serve as a foundation for overall conclusions on their own. Or, perform a series of additional confirmatory comparisons that adjusts for the collective false positive rate.14 Other options to consider are using the Tukey HSD procedure for pairwise comparisons, or testing the hypotheses in a particular order to preserve statistical power (Rosenbaum 2008). 5.1.2.1 Adjusting p-values and confidence intervals for multiple comparisons Here is an illustration of different methods of adjusting for multiple comparisons in R. To reflect that fact that we are making multiple comparisons, we could adjust ppp-values from (uncorrelated) tests to control the familywise error rate at &#x3B1;\\alpha&#x3B1; through either a single step procedure (e.g.&#xA0;Bonferroni correction) or a stepwise stepwise procedure (such as the Holm correction). We might also control the false discovery rate (e.g., using the Benjamini-Hochberg correction). Our standard practice is to adjust the FWER for uncorrelated tests using Holm adjustment. For more on such adjustments and multiple comparisons see EGAP&#x2019;s 10 Things you need to know about multiple comparisons. ## Get p-values but exclude intercept pvals &lt;- summary(estAndSE3multarms)$coef[2:4,4] ## Illustrate different corrections (or lack thereof) round(p.adjust(pvals, &quot;none&quot;), 3) Z4armsT2 Z4armsT3 Z4armsT4 0.574 0.877 0.102 round(p.adjust(pvals, &quot;bonferroni&quot;), 3) Z4armsT2 Z4armsT3 Z4armsT4 1.000 1.000 0.307 round(p.adjust(pvals, &quot;holm&quot;), 3) Z4armsT2 Z4armsT3 Z4armsT4 1.000 1.000 0.307 round(p.adjust(pvals, &quot;hochberg&quot;), 3) # FDR instead of FWER Z4armsT2 Z4armsT3 Z4armsT4 0.877 0.877 0.307 Simply adjusting ppp-values from this linear model, however, ignores the fact that we may be interested in other pairwise comparisons, such as the difference in effects between receiving T3 vs T4. It also ignores potential correlations in the distribution of test statistics (i.e., we are leaving statistical power &#x201C;on the table&#x201D;). Instead of the above, and instead of employing simulation to control the FWER (step 7 on this page), we can also implement a Tukey Honestly Signficant Differences (HSD) test. The Tukey HSD test (sometimes called a Tukey range test or just a Tukey test) calculates multiple-comparison-adjusted ppp-values and simultaneous confidence intervals for all pairwise comparisons in a model, while taking into account possible correlations between test statistics. It is similar to a two-sample t-test, but with built in adjustment for multiple comparisons. The test statistic for any comparison between two equally-sized groups iii and jjj is: tij=yi&#x2C9;&#x2212;yj&#x2C9;s2nt_{ij} = \\frac{\\bar{y_i}-\\bar{y_j}}{s\\sqrt{\\frac{2}{n}}}tij&#x200B;=sn2&#x200B;&#x200B;yi&#x200B;&#x2C9;&#x200B;&#x2212;yj&#x200B;&#x2C9;&#x200B;&#x200B; yi&#x2C9;\\bar{y_i}yi&#x200B;&#x2C9;&#x200B; and yj&#x2C9;\\bar{y_j}yj&#x200B;&#x2C9;&#x200B; are the means in groups iii and jjj, respectively. sss is the pooled standard deviation of the outcome, and nnn is the common sample size. A critical value is then chosen for tijt_{ij}tij&#x200B; given the desired significance level, &#x3B1;\\alpha&#x3B1;, the number of groups being compared, kkk, and the degrees of freedom, n&#x2212;kn-kn&#x2212;k. We&#x2019;ll represent this critical value with t&#x3B1;,k,nt_{\\alpha,k,n}t&#x3B1;,k,n&#x200B;. The confidence interval for any difference between equally-sized groups is then:15 [yi&#x2C9;&#x2212;yj&#x2C9;&#x2212;t&#x3B1;,k,ns2n,yi&#x2C9;&#x2212;yj&#x2C9;+t&#x3B1;,k,ns2n]\\left[\\bar{y_i}-\\bar{y_j}-t_{\\alpha,k,n}s\\sqrt{\\frac{2}{n}}\\hspace{2mm},\\hspace{2mm} \\bar{y_i}-\\bar{y_j}+t_{\\alpha,k,n}s\\sqrt{\\frac{2}{n}}\\right][yi&#x200B;&#x2C9;&#x200B;&#x2212;yj&#x200B;&#x2C9;&#x200B;&#x2212;t&#x3B1;,k,n&#x200B;sn2&#x200B;&#x200B;,yi&#x200B;&#x2C9;&#x200B;&#x2212;yj&#x200B;&#x2C9;&#x200B;+t&#x3B1;,k,n&#x200B;sn2&#x200B;&#x200B;] We present an implementation of the Tukey HSD test using the glht() function from the multcomp package, which offers more flexiblity than the TukeyHSD in the base stats package (at the price of a slightly more complicated syntax). ## We can use aov() or lm() ## aovmod &lt;- aov(Y~Z4arms, dat1) lmmod &lt;- lm(Y~Z4arms, dat1) Using the glht() function&#x2019;s linfcnt argument, we tell the function to conduct a Tukey test of all pairwise comparisons for our treatment indicator, ZZZ. tukey_mc &lt;- glht(lmmod, linfct = mcp(Z4arms = &quot;Tukey&quot;)) summary(tukey_mc) Simultaneous Tests for General Linear Hypotheses Multiple Comparisons of Means: Tukey Contrasts Fit: lm(formula = Y ~ Z4arms, data = dat1) Linear Hypotheses: Estimate Std. Error t value Pr(&gt;|t|) T2 - T1 == 0 0.733 1.226 0.60 0.93 T3 - T1 == 0 0.180 1.226 0.15 1.00 T4 - T1 == 0 2.037 1.226 1.66 0.35 T3 - T2 == 0 -0.553 1.226 -0.45 0.97 T4 - T2 == 0 1.304 1.226 1.06 0.71 T4 - T3 == 0 1.857 1.226 1.51 0.43 (Adjusted p values reported -- single-step method) We can then plot the 95% family wise confidence intervals for these comparisons. ## Save dfault ploting parameters op &lt;- par() ## Add space to left-hand outer margin par(oma = c(1, 3, 0, 0)) plot(tukey_mc) We can also obtain simultaneous confidence intervals at other levels of statistical significance using the confint() function. ## Generate and plot 90% confidence intervals tukey_mc_90ci &lt;- confint(tukey_mc, level = .90) plot(tukey_mc_90ci) ## Restore plotting defaults, now par(op) See also: pairwise.prop.test for binary outcomes. 5.1.3 Multiple Outcomes Our studies often involve more than one outcome measure. Assessing the effect of even a simple two-arm treatment on 10 different outcomes raises the same kinds of questions that come up in the context of multi-arm trials, generally requiring applications of the methods discussed above. 5.2 Covariance adjustment (the use of background information to increase precision) When we have background or baseline information about experimental units, we can use this to increase the precision with which we estimate our treatment effects (i.e., increase the statistical power of our tests). We prefer to use this information during the design phase to create block randomized designs. But we may only have access to such background information after the study has been fielded, and so we will pre-specify use of this information to increase our statistical power. We sometimes avoid the practice of adjusting for covariates (or fixed effect dummies) in a linear and additive fashion. This estimator of the average treatment effect can be subject to small-sample bias and may be &#x2014; counterintuitively &#x2014; less efficient (Freedman 2008a).16 In contrast, an approach to covariate adjustment that we call the &#x201C;Lin estimator&#x201D; performs better (Lin 2013). To be clear, the bias/precision-loss attributable to linear covariance adjustment estimator often tends to be quite small, especially when sample sizes are large (Lin 2013). Yet, because it is frequently costless to use the Lin estimator in sufficiently large samples, this is our default recommendation (see this page as well). That said, a number of our projects encounter situations where linear, additive covariate adjustment is preferred.17 5.2.1 Intuition about bias in the least squares estimator of the ATE with covariates When we estimate the average treatment effect using least squares we tend to say that we &#x201C;regress&#x201D; some outcome for each unit iii, YiY_iYi&#x200B;, on (often binary) treatment assignment, ZiZ_iZi&#x200B;, where Zi=1Z_i=1Zi&#x200B;=1 if a unit is assigned to treatment and 0 if assigned to control. And we write a linear model relating ZZZ and YYY as below, where &#x3B2;1\\beta_1&#x3B2;1&#x200B; represents the difference in means of YYY between units with Z=1Z=1Z=1 and Z=0Z=0Z=0: Yi=&#x3B2;0+&#x3B2;1Zi+ei\\begin{equation} Y_i = \\beta_0 + \\beta_1 Z_i + e_i \\end{equation}Yi&#x200B;=&#x3B2;0&#x200B;+&#x3B2;1&#x200B;Zi&#x200B;+ei&#x200B;&#x200B;&#x200B; This is a common practice because we know that the formula to estimate &#x3B2;1\\beta_1&#x3B2;1&#x200B; in Equation (1) is the same as the difference-in-means when comparing YYY across the treatment and control groups: &#x3B2;^1=Y&#x203E;Z=1&#x2212;Y&#x203E;Z=0=Cov(Y,Z)Var(Z).\\begin{equation} \\hat{\\beta}_1 = \\overline{Y}_{Z=1} - \\overline{Y}_{Z=0} = \\frac{\\mathrm{Cov}(Y,Z)}{\\mathrm{Var}(Z)}. \\end{equation}&#x3B2;^&#x200B;1&#x200B;=YZ=1&#x200B;&#x2212;YZ=0&#x200B;=Var(Z)Cov(Y,Z)&#x200B;.&#x200B;&#x200B; This last term, expressed with covariances and variances, is the expression for the slope coefficient in a bivariate OLS regression model. This estimator of the average treatment effect has no systematic error (i.e., it is unbiased), so we can write ER(&#x3B2;^1)=&#x3B2;1&#x2261;ATEE_R(\\hat{\\beta}_1)=\\beta_1 \\equiv \\text{ATE}ER&#x200B;(&#x3B2;^&#x200B;1&#x200B;)=&#x3B2;1&#x200B;&#x2261;ATE, where ER(&#x3B2;^1)E_R(\\hat{\\beta}_1)ER&#x200B;(&#x3B2;^&#x200B;1&#x200B;) refers to the expectation of &#x3B2;^1\\hat{\\beta}_{1}&#x3B2;^&#x200B;1&#x200B; across randomizations consistent with the experimental design. Sometimes we have an additional (pre-treatment) covariate, XiX_iXi&#x200B;, commonly included in the analysis as follows: Yi=&#x3B2;0+&#x3B2;1Zi+&#x3B2;2Xi+ei\\begin{equation} Y_i = \\beta_0 + \\beta_1 Z_i + \\beta_2 X_i + e_i \\end{equation}Yi&#x200B;=&#x3B2;0&#x200B;+&#x3B2;1&#x200B;Zi&#x200B;+&#x3B2;2&#x200B;Xi&#x200B;+ei&#x200B;&#x200B;&#x200B; What is &#x3B2;1\\beta_1&#x3B2;1&#x200B; in this case? The matrix representation here is: (&#x3B2;XT&#x3B2;X)&#x2212;1&#x3B2;XT&#x3B2;y(\\beta X^{T}\\beta X)^{-1}\\beta X^{T}\\beta y(&#x3B2;XT&#x3B2;X)&#x2212;1&#x3B2;XT&#x3B2;y. But it will be more useful to examine the scalar formula: &#x3B2;^1=Var(X)Cov(Z,Y)&#x2212;Cov(X,Z)Cov(X,Y)Var(Z)Var(X)&#x2212;Cov(Z,X)2\\hat{\\beta}_1 = \\frac{\\mathrm{Var}(X)\\mathrm{Cov}(Z,Y) - \\mathrm{Cov}(X,Z)\\mathrm{Cov}(X,Y)}{\\mathrm{Var}(Z)\\mathrm{Var}(X) - \\mathrm{Cov}(Z,X)^2}&#x3B2;^&#x200B;1&#x200B;=Var(Z)Var(X)&#x2212;Cov(Z,X)2Var(X)Cov(Z,Y)&#x2212;Cov(X,Z)Cov(X,Y)&#x200B; In very large experiments Cov(X,Z)&#x2248;0\\mathrm{Cov}(X,Z) \\approx 0Cov(X,Z)&#x2248;0 because ZZZ is randomly assigned and is thus independent of background variables like XXX. However in any given finite sized experiment Cov(X,Z)&#x2260;0\\mathrm{Cov}(X,Z) \\ne 0Cov(X,Z)&#xE020;=0, so this does not reduce to an unbiased estimator as it does in the bivariate case. Thus, Freedman (2008a) showed that there is a small amount of bias in using the equation above to estimate the average treatment effect. To engage with this problem, and an asymptotic inefficiency issue associated with linear covariance adjustment, Lin (2013) suggested using the following least squares approach &#x2014; regressing the outcome on binary treatment assignment ZiZ_iZi&#x200B; and its interaction with mean-centered covariates: Yi=&#x3B2;0+&#x3B2;1Zi+&#x3B2;2(Xi&#x2212;X&#x2C9;)+&#x3B2;3Zi(Xi&#x2212;X&#x2C9;)+ei\\begin{equation} Y_i = \\beta_0 + \\beta_1 Z_i + \\beta_2 ( X_i - \\bar{X} ) + \\beta_3 Z_i (X_i - \\bar{X}) + e_i \\end{equation}Yi&#x200B;=&#x3B2;0&#x200B;+&#x3B2;1&#x200B;Zi&#x200B;+&#x3B2;2&#x200B;(Xi&#x200B;&#x2212;X&#x2C9;)+&#x3B2;3&#x200B;Zi&#x200B;(Xi&#x200B;&#x2212;X&#x2C9;)+ei&#x200B;&#x200B;&#x200B; When implementing this covariance adjustment strategy, remember that every covariate, including binary indicators used to estimate fixed effects or to control for categorical covariates, should be mean-centered and interacted with treatment. For instance, imagine a design with two treatment arms (treatment vs control) and three covariates. Linear adjustment for these covariates would involve fitting an OLS regression with four slope coefficients (one for the treatment group, and one for each covariate). Lin (2013) adjustment for these covariates would instead involve fitting a regression with seven slope coefficients (one for the treatment group, one for each mean-centered covariate, and one for each interaction of treatment with a mean-centered covariate).18 See the Green-Lin-Coppock SOP for more examples of this approach to covariance adjustment. 5.2.2 Illustrating the Lin Approach to Covariance Adjustment Here, we show how covariance adjustment can create bias in estimation of the average treatment effect &#x2014; and how to reduce this bias while using the Lin procedure as well as by increasing the size of the experiment. In this case, we compare an experiment with 20 units to an experiement with 100 units, in each case with half of the units assigned to treatment by complete random assignment. We use the DeclareDesign R package to make this process of assessing bias easier.19 Much of the code that follows is providing instructions to the diagnose_design command, which repeats the design of the experiment many times, each time estimating an average treatment effect, and comparing the mean of those estimate to the truth (labeled &#x201C;Mean Estimand&#x201D; below). The true potential outcomes (y1 and y0) are generated using one covariate, called cov2, with no true treatment effect. In what follows, we compare the performance of (1) the simple estimator using OLS to (2) estimators that use Lin&#x2019;s procedure involving just the correct covariate, and also to (3) estimators that use incorrect covariates (since we rarely know exactly the covariates that help generate any given behavioral outcome). We&#x2019;ll break this code up into sections to help with legibility. First, let&#x2019;s prepare design objects (a class used by DeclareDesign) for the n=20n=20n=20 and n=100n=100n=100 designs. ## Keep a dataframe of select variables wrkdat1 &lt;- dat1 %&gt;% dplyr::select(id,y1,y0,contains(&quot;cov&quot;)) ## Declare this as our larger population ## (an experimental sample of 100 units) popbigdat1 &lt;- declare_population(wrkdat1) ## A dataset to represent a smaller experiment, ## or a cluster randomized experiment with few clusters ## (an experimental sample of 20 units) set.seed(12345) smalldat1 &lt;- dat1 %&gt;% dplyr::select(id,y1,y0,contains(&quot;cov&quot;)) %&gt;% sample_n(20) ## The relevant covariate is a reasonably strong predictor of the outcome summary(lm(y0~cov2,data=smalldat1))$r.squared ## Now declare the differeent inputs for DeclareDesign ## (declare the smaller population, and assign treatment in each) popsmalldat1 &lt;- declare_population(smalldat1) assignsmalldat1 &lt;- declare_assignment(Znew=complete_ra(N,m=10)) assignbigdat1 &lt;- declare_assignment(Znew=complete_ra(N,m=50)) ## No additional treatment effects ## (potential outcomes) po_functionNull &lt;- function(data){ data$Y_Znew_0 &lt;- data$y0 data$Y_Znew_1 &lt;- data$y1 data } ## A few additional declare design settings ysdat1 &lt;- declare_potential_outcomes(handler = po_functionNull) theestimanddat1 &lt;- declare_inquiry(ATE = mean(Y_Znew_1 - Y_Znew_0)) theobsidentdat1 &lt;- declare_reveal(Y, Znew) ## The smaller sample design thedesignsmalldat1 &lt;- popsmalldat1 + assignsmalldat1 + ysdat1 + theestimanddat1 + theobsidentdat1 ## The larger sample design thedesignbigdat1 &lt;- popbigdat1 + assignbigdat1 + ysdat1 + theestimanddat1 + theobsidentdat1 Next, we&#x2019;ll prepare a list of estimators (i.e., models) we want to compare. These include different numbers of covariates, with and without Lin (2013) adjustment. ## Declare a selection of different estimation strategies estCov0 &lt;- declare_estimator(Y~Znew, inquiry=theestimanddat1, .method=lm_robust, label=&quot;CovAdj0: Lm, No Covariates&quot;) estCov1 &lt;- declare_estimator(Y~Znew+cov2, inquiry=theestimanddat1, .method=lm_robust, label=&quot;CovAdj1: Lm, Correct Covariate&quot;) estCov2 &lt;- declare_estimator(Y~Znew+cov1+cov2+cov3+cov4+cov5+cov6+cov7+cov8, inquiry=theestimanddat1, .method=lm_robust, label=&quot;CovAdj2: Lm, Mixed Covariates&quot;) estCov3 &lt;- declare_estimator(Y~Znew+cov1+cov3+cov4+cov5+cov6, inquiry=theestimanddat1, .method=lm_robust, label=&quot;CovAdj3: Lm, Wrong Covariates&quot;) estCov4 &lt;- declare_estimator(Y~Znew,covariates=~cov1+cov2+cov3+cov4+cov5+cov6+cov7+cov8, inquiry=theestimanddat1, .method=lm_lin, label=&quot;CovAdj4: Lin, Mixed Covariates&quot;) estCov5 &lt;- declare_estimator(Y~Znew,covariates=~cov2, inquiry=theestimanddat1, .method=lm_lin, label=&quot;CovAdj5: Lin, Correct Covariate&quot;) ## List them all together all_estimators &lt;- estCov0 + estCov1 + estCov2 + estCov3 + estCov4 + estCov5 After this, we&#x2019;ll add those estimators to our design class objects. ## Smaller sample thedesignsmalldat1PlusEstimators &lt;- thedesignsmalldat1 + all_estimators ## Larger sample thedesignbigdat1PlusEstimators &lt;- thedesignbigdat1 + all_estimators Now, let&#x2019;s simulate each design 200 times and evaluate their performance. First, the smaller sample: ## Summarize characteristics of the smaller-sample designs sims &lt;- 200 set.seed(12345) thediagnosisCovAdj1 &lt;- diagnose_design( thedesignsmalldat1PlusEstimators, sims = sims, bootstrap_sims = 0 ) Second, the larger sample: ## Summarize characteristics of the larger-sample designs set.seed(12345) thediagnosisCovAdj2 &lt;- diagnose_design( thedesignbigdat1PlusEstimators, sims = sims, bootstrap_sims = 0 ) From the small sample simulation (N=20), we can see that &#x201C;CovAdj1: Lm, Correct Covariate&#x201D; shows fairly large bias compared to the estimator using no covariates at all. The Lin approach using only the correct covariate reduces the bias, but does not erase it. However, the unadjusted estimator has fairly low power where as the Lin approach with the correct covariate &#x201C;CovAdj5: Lin, Correct Covariate&#x201D; has excellent power to detect the 1 SD effect built into this experiment. One interesting result here is that the Lin approach is worst (in terms of power) when a mixture of correct and incorrect covariates are added to the linear model following the interaction-and-centering based approach. Estimator Term Mean Estimand Mean Estimate Bias SD Estimate RMSE Power CovAdj0: Lm, No Covariates Znew 5.03 5.08 0.05 1.78 1.78 0.65 CovAdj1: Lm, Correct Covariate Znew 5.03 5.32 0.29 1.08 1.11 0.98 CovAdj2: Lm, Mixed Covariates Znew 5.03 5.12 0.09 1.39 1.39 0.89 CovAdj3: Lm, Wrong Covariates Znew 5.03 5.21 0.18 1.64 1.65 0.78 CovAdj4: Lin, Mixed Covariates Znew 5.03 4.58 -0.45 8.07 8.06 0.35 CovAdj5: Lin, Correct Covariate Znew 5.03 5.13 0.10 1.05 1.05 1.00 The experiment with N=100N=100N=100 shows much smaller bias than the small experiment above. Since all estimators allow us to detect the 1 SD effect (Power=1), we can look to the RMSE (Root Mean Squared Error) column to learn about the precision of these estimators. Again, the unadjusted approach has low bias, but it now has the largest standard error. While the Lin approach with a mixture of correct and incorrect covariates has low bias, it shows slightly worse precision than one that gets the choice of covariates correct. kable(reshape_diagnosis(thediagnosisCovAdj2)[,diagcols] ) Estimator Term Mean Estimand Mean Estimate Bias SD Estimate RMSE Power CovAdj0: Lm, No Covariates Znew 5.45 5.45 -0.01 0.76 0.76 1.00 CovAdj1: Lm, Correct Covariate Znew 5.45 5.47 0.02 0.50 0.50 1.00 CovAdj2: Lm, Mixed Covariates Znew 5.45 5.48 0.03 0.53 0.53 1.00 CovAdj3: Lm, Wrong Covariates Znew 5.45 5.44 -0.01 0.63 0.63 1.00 CovAdj4: Lin, Mixed Covariates Znew 5.45 5.47 0.02 0.53 0.53 1.00 CovAdj5: Lin, Correct Covariate Znew 5.45 5.47 0.01 0.50 0.50 1.00 The Lin approach works well when covariates are few and sample sizes are large, but these simulations show where the approach is weaker: when there are many covariates (relative to the number of observations), some of which may not actually be correlated with the outcome. In this case, the estimator involving both correct and irrelevant covariates included 18 terms. Fitting a model with 18 terms using a small sample, e.g.&#xA0;N=20N=20N=20, allows nearly any observation to exert undue influence, increases the risk of serious multicollinearity, and leads to overfitting problems in general. Our team does not often run into such an extreme version of this problem because our studies have tended to involve many thousands of units and relatively few covariates. However, when we do encounter situations where the number of covariates (or fixed effects) we&#x2019;d like to account for is large, we consider a few alternative approaches: (1) standard linear covariate adjustment; (2) collapsing the covariates into fewer dimensions (e.g., using principal component analysis); or (3) working with a residualized version of the outcome, as described below. 5.2.3 The Rosenbaum Approach to Covariance Adjustment When we have many covariates, sometimes Lin adjustment prevents us from calculating appropriate standard errors and/or can lead to overfitting. Rosenbaum (2002) showed an approach in which the outcomes are regressed on covariates, ignoring treatment assignment, and then the residuals from that first regression are used as the outcome in a second regression to estimate an average treatment effect. Again, we evaluate this approach through simulation. First, code we use to generate Rosenbaum (2002) estimators: ## The argument covs is a character vector of names of covariates. ## The function below generates a separate estimation command ## that performs Rosenbaum (2002) adjustment for the specified ## covariates, given a sample of data. This new function can ## then by used as an estimator in simulations below. This code ## takes advantage of the concept of &quot;function factories.&quot; ## See, e.g.: https://adv-r.hadley.nz/function-factories.html. make_est_fun&lt;-function(covs){ force(covs) ## Generate a formula from the character vector of covariates covfmla &lt;- reformulate(covs,response=&quot;Y&quot;) ## What the new function to-be-generated will do, ## given the model generated above: function(data){ data$e_y &lt;- residuals(lm(covfmla,data=data)) obj &lt;- lm_robust(e_y~Znew,data=data) res &lt;- tidy(obj) %&gt;% filter(term==&quot;Znew&quot;) return(res) } } ## Make Rosenbaum (2002) estimators for different groups of covariates est_fun_correct &lt;- make_est_fun(&quot;cov2&quot;) est_fun_mixed&lt;- make_est_fun(c(&quot;cov1&quot;,&quot;cov2&quot;,&quot;cov3&quot;,&quot;cov4&quot;,&quot;cov5&quot;,&quot;cov6&quot;,&quot;cov7&quot;,&quot;cov8&quot;)) est_fun_incorrect &lt;- make_est_fun(c(&quot;cov1&quot;,&quot;cov2&quot;,&quot;cov3&quot;,&quot;cov4&quot;,&quot;cov5&quot;,&quot;cov6&quot;)) ## Declare additional estimators, to add to the designs above estCov6 &lt;- declare_estimator(handler = label_estimator(est_fun_correct), inquiry=theestimanddat1, label=&quot;CovAdj6: Resid, Correct&quot;) estCov7 &lt;- declare_estimator(handler = label_estimator(est_fun_mixed), inquiry=theestimanddat1, label=&quot;CovAdj7: Resid, Mixed&quot;) estCov8 &lt;- declare_estimator(handler = label_estimator(est_fun_incorrect), inquiry=theestimanddat1, label=&quot;CovAdj8: Resid, InCorrect&quot;) ## Add the additional estimators thedesignsmalldat1PlusRoseEstimators &lt;- thedesignsmalldat1 + all_estimators + estCov6 + estCov7 + estCov8 thedesignbigdat1PlusRoseEstimators &lt;- thedesignbigdat1 + all_estimators + estCov6 + estCov7 + estCov8 Second, we evaluate a design that applies those estimators (alongside the others) to our smaller sample: set.seed(12345) thediagnosisCovAdj3 &lt;- diagnose_design( thedesignsmalldat1PlusRoseEstimators, sims = sims, bootstrap_sims = 0 ) Finally, we evaluate a design that applies those estimators (alongside the others above) to our larger sample: set.seed(12345) thediagnosisCovAdj4 &lt;- diagnose_design( thedesignbigdat1PlusRoseEstimators, sims = sims, bootstrap_sims = 0 ) With a small sample (N=20), the Rosenbaum-style approach yields very little bias and quite high power using the correct covariate (&#x201C;CovAdj6: Resid, Correct&#x201D;), but performs poorly in terms of bias and precision with incorrect covariates. Estimator Term Mean Estimand Mean Estimate Bias SD Estimate RMSE Power 7 CovAdj6: Resid, Correct Znew 5.03 5.00 -0.03 1.02 1.02 1.00 8 CovAdj7: Resid, Mixed Znew 5.03 2.95 -2.08 1.11 2.35 0.80 9 CovAdj8: Resid, InCorrect Znew 5.03 3.53 -1.50 1.20 1.92 0.85 With a larger experiment, the bias goes down, but coverage is still relatively worse when incorrect covariates are included. We speculate that performance might improve if we fit covariance adjustment models that produce residuals separately for the treated and control groups. Estimator Term Mean Estimand Mean Estimate Bias SD Estimate RMSE Power 7 CovAdj6: Resid, Correct Znew 5.45 5.42 -0.03 0.49 0.49 1.00 8 CovAdj7: Resid, Mixed Znew 5.45 5.05 -0.40 0.53 0.67 1.00 9 CovAdj8: Resid, InCorrect Znew 5.45 5.14 -0.31 0.52 0.61 1.00 5.3 How to choose covariates for covariance adjustment? Our analysis plans commonly specify a few covariates based on what we know about the mechanisms and context of the study. In general, if we have a measurement of the outcome before the treatment was assigned &#x2014; the baseline outcome &#x2014; we try to use it as a part of a blocking or covariance adjustment strategy. When we have access to many covariates, we may sometimes use simple machine learning methods to select variables that strongly predict the outcome, such as a lasso model. In particular, we tend to prefer the adaptive lasso rather than a simple lasso because it has better theoretical properties (Zou 2006), but also because the adaptive lasso tends to produce sparser results &#x2014; and the bias from covariance adjustment can sometimes be significance if we include too many covariates. 5.4 Block-randomized trials We design block-randomized trials by splitting units into groups based on predefined characteristics &#x2014; covariates that cannot be changed by the experimental treatment &#x2014; and then randomly assigning treatment within each group. We use this procedure when we want to increase our ability to detect signal from noise. It assumes that the noise, or random variation in the outcome measure, is associated with the variables that we use to assign blocks. For example, if we imagine that patterns of energy use will tend to differ according to size of family, we may create blocks or strata of different family sizes and randomly assign an energy saving intervention separately within those blocks. We also design block-randomized experiments when we want to assess effects within and across subgroups (for example, if we want to ensure that we have enough statistical power to detect a difference in effects between veterans and non-veterans). If we have complete random assignment, it is likely that the proportion of veterans assigned treatment will not be exactly same as the proportion of non-veterans receiving treatment. However, if we stratify or block the group on military status, and randomly assign treatment and control within each group, we can then ensure that equal proportions (or numbers) or veterans and non-veterans receive the treatment and control. Most of the general ideas that we demonstrated in the context of completely randomized trials have direct analogues in the case of block randomized trials. The only additional question that arises with block randomized trials is about how to weight the contributions of each individual block when calculating an overall average treatment effect or testing an overall hypothesis about treatment effects. We begin with the simple case of testing the sharp null of no effects when we have a binary outcome &#x2014; in the case of a Cochran-Mantel-Haenszel test the weighting of different blocks is handled automatically. 5.4.1 Testing binary outcomes under block randomization: Cochran-Mantel-Haenszel (CMH) test for K X 2 X 2 tables For block-randomized trials with a binary outcome, we might use the CMH test to evaluate the null of no effect.20 This is one way of keeping the outcomes for each strata separate rather than pooling them together &#x2014; under blocking, we are effectively repeating the same experiment separately within each stratum. The CMH test tells us if the odds ratios across strata support an association between the outcome and treatment (Cochran 1954; Mantel and Haenszel 1959). To set up the CMH test, we need k sets of 2x2 contingency tables. Suppose the table below represents outcomes from stratum i where A, B, C, and D are counts of observations: Assignment Response No response Total Treatment A B A+B Control C D C+D Total A+C B+D A+B+C+D = T The CMH test statistic takes the sum of the deviations between observed and expected outcomes within each stratum (OiO_{i}Oi&#x200B; and EiE_{i}Ei&#x200B;, respectively), squares this sum, and compares it to the sum of the variance within each strata: CMH=[&#x2211;i=1k(Oi&#x2212;Ei)]2&#x2211;i=1kVar[Oi]CMH = \\frac{\\big[\\sum_{i=1}^{k} (O_{i} - E_{i})\\big]^{2}}{\\sum_{i=1}^{k}{\\mathrm{\\mathrm{Var}}[O_{i}]}}CMH=&#x2211;i=1k&#x200B;Var[Oi&#x200B;][&#x2211;i=1k&#x200B;(Oi&#x200B;&#x2212;Ei&#x200B;)]2&#x200B; where Oi=(Ai+Bi)(Ai+Ci)TiO_{i} = \\frac{(A_i+B_i)(A_i+C_i)}{T_i}Oi&#x200B;=Ti&#x200B;(Ai&#x200B;+Bi&#x200B;)(Ai&#x200B;+Ci&#x200B;)&#x200B; and Var[Oi]=(Ai+Bi)(Ai+Ci)(Bi+Di)(Ci+Di)Ti2(Ti&#x2212;1)\\mathrm{Var}[O_{i}] = \\frac{(A_i+B_i)(A_i+C_i)(B_i+D_i)(C_i+D_i)}{{T_i}^2(T_i-1)}Var[Oi&#x200B;]=Ti&#x200B;2(Ti&#x200B;&#x2212;1)(Ai&#x200B;+Bi&#x200B;)(Ai&#x200B;+Ci&#x200B;)(Bi&#x200B;+Di&#x200B;)(Ci&#x200B;+Di&#x200B;)&#x200B; In large-enough samples, if there are no associations between treatment and outcomes across strata, we would expect to see an odds ratio equal to 1. Across randomizations of large-enough samples, this test statistic follows an asymptotic &#x3C7;2\\chi^2&#x3C7;2 distribution with degrees of freedom = 1. For a standard two-arm trial, the odds ratio for a given stratum would be: OR=A/BC/D=ADBCOR = \\frac{A/B}{C/D} = \\frac{AD}{BC}OR=C/DA/B&#x200B;=BCAD&#x200B; Across strata, could then find an overall common odds ratio as follows: ORCMH=&#x2211;i=1k(AiDi/Ti)&#x2211;i=1kBiCiTi\\begin{equation} OR_{CMH} = \\frac{\\sum_{i=1}^{k} (A_{i}D_{i}/T_{i})}{\\sum_{i=1}^{k}{B_{i}C_{i}}{T_{i}}} \\end{equation}ORCMH&#x200B;=&#x2211;i=1k&#x200B;Bi&#x200B;Ci&#x200B;Ti&#x200B;&#x2211;i=1k&#x200B;(Ai&#x200B;Di&#x200B;/Ti&#x200B;)&#x200B;&#x200B;&#x200B; If this common odds ratio is substantially greater than 1, then we should suspect that there is an association between the outcome and treatment across strata, and the CMH test statistic would be large. If ORCMH=1OR_{CMH} = 1ORCMH&#x200B;=1, this would instead support the null hypothesis that there is no association between treatment and the outcome, and the CMH test statistic would be small. We could also use the CMH test to compare odds ratios between experiments, rather than comparing against the null that the common odds ratio = 1. 5.4.2 Estimating an overall average treatment effect Whether or not we randomly assign a policy intervention within blocks or strata, our team nearly always reports a single estimate of the average treatment effect. To review, we define the overall ATE (the theoretical estimand) as a simple average of the individual treatment effects. For two treatments, we might write this individual-level causal effect as &#x3C4;i=yi,0&#x2212;yi,1\\tau_i = y_{i,0} - y_{i,1}&#x3C4;i&#x200B;=yi,0&#x200B;&#x2212;yi,1&#x200B;. We&#x2019;d therefore express the overall (true) ATE across our sample as as &#x3C4;&#x2C9;=(1/n)&#x2211;i=1n&#x3C4;i\\bar{\\tau}=(1/n) \\sum_{i=1}^n \\tau_i&#x3C4;&#x2C9;=(1/n)&#x2211;i=1n&#x200B;&#x3C4;i&#x200B;. Unfortunately, this quantity is unobservable. In blocked designs, we have randomly assigned the intervention within each block independently. As we note above, this (1) increases precision and (2) supports more credible subgroup analysis. How might we &#x201C;analyze as we have randomized&#x201D; to learn about &#x3C4;&#x2C9;\\bar{\\tau}&#x3C4;&#x2C9; using observable data? Our approach is to build up from the block-level. See Gerber and Green (2012) for more context. Say, for example, that the unobserved ATE within a given block, bbb, was ATEb=&#x3C4;&#x2C9;b=(1/nb)&#x2211;i=1nb&#x3C4;i\\text{ATE}_{b}=\\bar{\\tau}_b=(1/n_b)\\sum_{i=1}^{n_b} \\tau_{i}ATEb&#x200B;=&#x3C4;&#x2C9;b&#x200B;=(1/nb&#x200B;)&#x2211;i=1nb&#x200B;&#x200B;&#x3C4;i&#x200B;. Here, we are averaging the individual level treatment effects (&#x3C4;i\\tau_{i}&#x3C4;i&#x200B;) across all nbn_bnb&#x200B; people in block bbb. Now, imagine that we had an experiment with blocks of different sizes (and perhaps with different proportions of units assigned to treatment &#x2014; e.g., certain blocks may be more expensive places in which to run an experiment). We can imagine learning about &#x3C4;&#x2C9;\\bar{\\tau}&#x3C4;&#x2C9; through another estimand, the block-size weighted average of the true within-block treatment effects: &#x3C4;&#x2C9;=&#x3C4;&#x2C9;nbwt=(1/B)&#x2211;b=1B(nb/n)&#x3C4;&#x2C9;b\\bar{\\tau} = \\bar{\\tau}_{\\text{nbwt}} = (1/B) \\sum_{b=1}^B (n_b/n) \\bar{\\tau}_b&#x3C4;&#x2C9;=&#x3C4;&#x2C9;nbwt&#x200B;=(1/B)b=1&#x2211;B&#x200B;(nb&#x200B;/n)&#x3C4;&#x2C9;b&#x200B; We can estimate &#x3C4;&#x2C9;nbwt\\bar{\\tau}_{\\text{nbwt}}&#x3C4;&#x2C9;nbwt&#x200B; based on its the observed analogue just as we have with a completely randomized experiment. Blocks are essentially their own randomized experiments, so we can estimate each &#x3C4;&#x2C9;b\\bar{\\tau}_b&#x3C4;&#x2C9;b&#x200B; using the following unbiased estimator, where i&#x2208;ti \\in ti&#x2208;t means &#x201C;for iii in the treatment group&#x201D; and where mbm_bmb&#x200B; is the number of units assigned to treatment in block bbb: &#x3C4;^b=&#x2211;i&#x2208;tYib/mb&#x2212;&#x2211;i&#x2208;cYib/(nb&#x2212;mb)\\hat{\\tau}_b=\\sum_{i \\in t} Y_{ib}/m_b - \\sum_{i \\in c} Y_{ib}/(n_b - m_b)&#x3C4;^b&#x200B;=i&#x2208;t&#x2211;&#x200B;Yib&#x200B;/mb&#x200B;&#x2212;i&#x2208;c&#x2211;&#x200B;Yib&#x200B;/(nb&#x200B;&#x2212;mb&#x200B;) We would then plug the &#x3C4;^b\\hat{\\tau}_b&#x3C4;^b&#x200B; estimates into the expression for &#x3C4;&#x2C9;nbwt\\bar{\\tau}_{\\text{nbwt}}&#x3C4;&#x2C9;nbwt&#x200B; above, yielding &#x3C4;&#x2C9;^nbwt\\hat{\\bar{\\tau}}_{\\text{nbwt}}&#x3C4;&#x2C9;^nbwt&#x200B;. Note that many people do not use this unbiased estimator because its precision is worse that those of another, slightly biased estimator. We illustrate both methods below, the block-size weighted estimator and what we call the &#x201C;precision-weighted&#x201D; estimator. We also offer some reflections on when a biased estimator that tends to produce answers closer to the truth might be preferred over an unbiased estimator where any given estimate may be farther from the truth. The precision-weighted estimator uses harmonic-weights. We have also tended to call it a &#x201C;precision-weighted average.&#x201D; The weights combine block size, nbn_bnb&#x200B;, and the proportion of the block assigned to treatment, pb=(1/nb)&#x2211;i=1nbZibp_b = (1/n_b) \\sum_{i=1}^{n_b} Z_{ib}pb&#x200B;=(1/nb&#x200B;)&#x2211;i=1nb&#x200B;&#x200B;Zib&#x200B;, for a binary treatment, ZibZ_{ib}Zib&#x200B;. The weight within each block is hb=nbpb(1&#x2212;pb)h_b = n_b p_b (1 - p_b)hb&#x200B;=nb&#x200B;pb&#x200B;(1&#x2212;pb&#x200B;), and the estimand is: &#x3C4;&#x2C9;hbwt=(1/B)&#x2211;b=1B(1/hb)&#x3C4;&#x2C9;b\\bar{\\tau}_{\\text{hbwt}}= (1/B) \\sum_{b=1}^B (1/h_b) \\bar{\\tau}_b&#x3C4;&#x2C9;hbwt&#x200B;=(1/B)b=1&#x2211;B&#x200B;(1/hb&#x200B;)&#x3C4;&#x2C9;b&#x200B; Notice that, by weighting blocks proportionally to their contributions to overall sample size, &#x3C4;&#x2C9;nbwt\\bar{\\tau}_{\\text{nbwt}}&#x3C4;&#x2C9;nbwt&#x200B; effectively treats all units equally in terms of their contributions to the ATE. In contrast, &#x3C4;&#x2C9;hbwt\\bar{\\tau}_{\\text{hbwt}}&#x3C4;&#x2C9;hbwt&#x200B; weights blocks (and therefore the individuals within them) relatively more if they have a treatment probability closer to 0.5.21 In effect, the precision benefits come from giving slightly more explanatory power to units in blocks with more balanced treatment assignment, rather than using the weights that recover &#x3C4;&#x2C9;\\bar{\\tau}&#x3C4;&#x2C9;. Now, we&#x2019;ll show multiple approaches to applying these estimators. We&#x2019;ll also demonstrate (1) that ignoring the blocks when estimating treatment effects can produce problems in both estimation and testing, and (2) that the block-size weighted approaches are unbiased but possibly less precise than the precision weighted approaches. ## Create block sizes and create block weights B &lt;- 10 # Number of blocks dat &lt;- data.frame(b=rep(1:B,c(8,20,30,40,50,60,70,80,100,800))) dat$bF &lt;- factor(dat$b) ## x1 is a covariate that strongly predicts the outcome without treatment set.seed(2201) dat &lt;- group_by(dat,b) %&gt;% mutate( nb=n(), x1=rpois(n = nb,lambda=runif(1,min=1,max=2000)) ) ## The treatment effect varies by block size (sqrt(nb) because nb has such a large range.) dat &lt;- group_by(dat,b) %&gt;% mutate( y0=sd(x1)*x1+rchisq(n=nb,df=1), y0=y0*(y0&gt;quantile(y0,.05)), tauib = -(sd(y0))*sqrt(nb) + rnorm(n(),mean=0,sd=sd(y0)), y1=y0+tauib, y1=y1*(y1&gt;0) ) blockpredpower &lt;- summary(lm(y0~bF,data=dat))$r.squared To make the differences between these estimation approaches more vivid, we&#x2019;ve create a dataset with blocks of widely varying sizes. Half of the blocks have half of the units assigned to treatment and the other half 10% of the units assigned to treatment. Notice also that the baseline outcomes are strongly predicted by the blocks (R2R^2R2 around 0.870.870.87). We use DeclareDesign to assess bias, coverage and power (or precision) of several different approaches to applying each estimator. The next code block sets up the simulation and also demonstrates different approaches to estimating an ATE (as usual, we can only do this because we are using simulation to compare these different statistical techniques in a setting where we know the true data generating process). ## Using the Declare Design Machinery to ensure that ## the data here and the simulations below match ## Declare the population thepop &lt;- declare_population(dat) ## Represent the potential outcomes with a function po_function &lt;- function(data){ data$Y_Z_0 &lt;- data$y0 data$Y_Z_1 &lt;- data$y1 data } ## Use this function to declare the potential outcomes theys &lt;- declare_potential_outcomes(handler = po_function) ## Declare the desired inquiry theestimand &lt;- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) ## Declare treatment assignment numtreated &lt;- sort(unique(dat$nb))/rep(c(2,10),B/2) theassign &lt;- declare_assignment(Z = block_ra(blocks = bF, block_m = numtreated)) ## Declare revealed data theobsident &lt;- declare_reveal(Y, Z) ## Combine these design elements together thedesign &lt;- thepop + theys + theestimand + theassign + theobsident # Draw data matching this design set.seed(2201) dat2 &lt;- draw_data(thedesign) ## Adding rank transformed outcomes for use later dat2 &lt;- dat2 %&gt;% group_by(b) %&gt;% mutate( y0md = y0 - mean(y0), y1md = y1 - mean(y1), alignedY = Y - mean(Y), rankalignedY = rank(alignedY) ) ## Now add individual-level weights to the data dat2 &lt;- dat2 %&gt;% group_by(b) %&gt;% mutate( nb = n(), # Size of block pib = mean(Z), # Prob. of treatment assignment nTb = sum(Z), # Number treated nCb = nb - nTb, # Number control nbwt = (Z/pib) + ((1-Z)/(1-pib)), # Unbiased regression weight hbwt = nbwt * (pib * (1 - pib)) # Precision regression weight ) ## Declare a new population, and generate another design thepop2 &lt;- declare_population(dat2) thedesign2 &lt;- thepop2 + theys + theestimand + theassign + theobsident ## Create the block level dataset, with block level weights. datB &lt;- group_by(dat2,b) %&gt;% summarize( taub = mean(Y[Z==1]) - mean(Y[Z==0]), # Effect (variance below) truetaub = mean(y1) - mean(y0), # True effect nb = n(), # Number in block nTb = sum(Z), # Number treated nCb = nb - nTb, # Number control estvartaub = (nb/(nb-1)) * (var(Y[Z==1])/nTb) + (var(Y[Z==0])/nCb), pb = mean(Z), # Proportion treated nbwt = unique(nb/nrow(dat2)), # Block-size weight pbwt = pb * ( 1 - pb), hbwt2 = nbwt * pbwt, # Precision weights hbwt3 = pbwt * nb, hbwt = (2*(nCb * nTb)/(nTb + nCb)) ) datB$greenlabrule &lt;- 20*datB$hbwt3/sum(datB$hbwt3) ## All of these expressions of the harmonic mean weight are the same datB$hbwt01 &lt;- datB$hbwt/sum(datB$hbwt) datB$hbwt02 &lt;- datB$hbwt2/sum(datB$hbwt2) datB$hbwt03 &lt;- datB$hbwt3/sum(datB$hbwt3) stopifnot(all.equal(datB$hbwt01, datB$hbwt02)) stopifnot(all.equal(datB$hbwt01, datB$hbwt03)) ## What is the &quot;true&quot; ATE? trueATE1 &lt;- with(dat2, mean(y1) - mean(y0)) trueATE2 &lt;- with(datB, sum(truetaub*nbwt)) stopifnot(all.equal(trueATE1, trueATE2)) ## We could define the following as an estimand, too. ## trueATE3 &lt;- with(datB, sum(truetaub*hbwt01)) ## c(trueATE1,trueATE2,trueATE3) ## We can get the same answer using R&apos;s weighted.mean command trueATE2b &lt;- weighted.mean(datB$truetaub, w=datB$nbwt) stopifnot(all.equal(trueATE2b, trueATE2)) We can now review the design: with(dat2, table(treatment=Z,blocknumber=b)) blocknumber treatment 1 2 3 4 5 6 7 8 9 10 0 4 18 15 36 25 54 35 72 50 720 1 4 2 15 4 25 6 35 8 50 80 With those simulations prepared, we&#x2019;ll start by comparing multiple approaches to getting an unbiased block-size-weighted average treatment effect estimate, &#x3C4;&#x2C9;nbwt\\bar{\\tau}_{\\text{nbwt}}&#x3C4;&#x2C9;nbwt&#x200B;. Notice that we do not use linear, additive fixed effects adjustment in any of these.22 Two of these approaches do include fixed effects dummies, but they are mean-centered and interacted with treatment assignment &#x2014; in other words, we include the fixed effects via Lin (2013) adjustment.23 simple_block refers to calculating mean differences within blocks and then taking the block-size weighted average of them diffmeans uses the difference_in_means function from the estimatr package (Blair et al. 2022) lmlin applies Lin covariance adjustment via block indicators, using the lm_lin function lmlinbyhand verifies that function using matrix operations; see this entry from the Green lab&#x2019;s SOP. interactionBFE uses the EstimateIWE function from the bfe package (Gibbons 2018) regwts uses the basic OLS function from R lm with appropriate weights. Let&#x2019;s compare the estimates themselves: ## simple_block ate_nbwt1 &lt;- with(datB,sum(taub*nbwt)) ## diffmeans ate_nbwt2 &lt;- difference_in_means(Y~Z,blocks=b,data=dat2) ## lmlin ate_nbwt3 &lt;- lm_lin(Y~Z,covariates=~bF,data=dat2) ## interactionBFE ate_nbwt5 &lt;- EstimateIWE(y=&quot;Y&quot;,treatment=&quot;Z&quot;,group=&quot;bF&quot;,controls=NULL,data=as.data.frame(dat2)) ## regwts ate_nbwt6 &lt;- lm_robust(Y~Z,data=dat2,weights=nbwt) ate_nbwt6a &lt;- lm(Y~Z,data=dat2,weights=nbwt) ate_nbwt6ase &lt;- coeftest(ate_nbwt6a,vcov=vcovHC(ate_nbwt6a,type=&quot;HC2&quot;)) ## lmlinbyhand X &lt;- model.matrix(~bF-1,data=dat2) barX &lt;- colMeans(X) Xmd &lt;- sweep(X,2,barX) stopifnot(all.equal((X[,3]-mean(X[,3])), Xmd[,3])) ZXmd &lt;- sweep(Xmd,1,dat2$Z,FUN=&quot;*&quot;) stopifnot(all.equal(dat2$Z*Xmd[,3],ZXmd[,3])) bigX &lt;- cbind(Intercept=1,Z=dat2$Z,Xmd[,-1],ZXmd[,-1]) bigXdf &lt;- data.frame(bigX,Y=dat2$Y) ate_nbwt4 &lt;-lm(Y~.-1,data=bigXdf) ate_nbwt4se &lt;- coeftest(ate_nbwt4,vcov.=vcovHC(ate_nbwt4,type=&quot;HC2&quot;)) ## List all nbwtates&lt;-c( simple_block=ate_nbwt1, diffmeans=ate_nbwt2$coefficients[[&quot;Z&quot;]], lmlin=ate_nbwt3$coefficients[[&quot;Z&quot;]], lmlinbyhand=ate_nbwt4$coefficients[[&quot;Z&quot;]], interactionBFE=ate_nbwt5$swe.est, regwts=ate_nbwt6$coefficients[[&quot;Z&quot;]] ) nbwtates simple_block diffmeans lmlin lmlinbyhand interactionBFE regwts -12823 -12823 -12823 -12823 -12823 -12823 Let&#x2019;s also quickly review their standard errors: ## Comparing the Standard Errors ate_nbwt1se &lt;- sqrt(sum(datB$nbwt^2 * datB$estvartaub)) nbwtses &lt;- c( simple_block=ate_nbwt1se, diffmeans=ate_nbwt2$std.error, lmlin=ate_nbwt3$std.error[[&quot;Z&quot;]], lmlinbyhand=ate_nbwt4se[&quot;Z&quot;,&quot;Std. Error&quot;], interactionBFE=ate_nbwt5$swe.var^.5, regwts=ate_nbwt6$std.error[[&quot;Z&quot;]] ) nbwtses simple_block diffmeans.Z lmlin lmlinbyhand interactionBFE regwts 182.0 181.3 181.3 181.3 172.3 441.0 As noted above, weighting by block size allows us to define the average treatment effect in a way that treats each unit equally. And we have just illustrated six different ways to estimate this effect. If we want to calculate standard errors for these estimators (e.g., to produce confidence intervals), we will, in general, be leaving statistical power on the table in exchange for an easier to interpret estimate, and an estimator that relates to its underlying target in an unbiased manner. Next, we show an approach to blocking adjustment that is optimal from the perspective of statistical power, or narrow confidence intervals. As discussed above, we call this the &#x201C;precision-weighted&#x201D; average treatment effect.24 In some literatures, it&#x2019;s typical to use OLS regression machinery to calculate an ATE that is weighted to account for blocking &#x2014; i.e., a &#x201C;Least Squared Dummy Variables&#x201D; (LSDV) approach to including block fixed effects in a regression. We show here that this is simply another version of the precision-weighted ATE estimator. simple_block calculates a simple differences of means within blocks and then takes a weighted average of those differences, using precision weights lm_fixed_effects1 uses lm_robust with binary indicators for blocks lm_fixed_effects2 uses lm_robust with the fixed_effects option including a factor variable recording block membership direct_wts uses lm_robust without block-indicators but with precision weights demeaned regresses a block-centered version of the outcome on a block-centered version of the treatment indicator (i.e., including block fixed effects through a within estimator). Let&#x2019;s compare the estimates themselves: ## simple_block ate_hbwt1 &lt;- with(datB, sum(taub*hbwt01)) ## lm_fixed_effects1 ate_hbwt2 &lt;- lm_robust(Y~Z+bF,data=dat2) ## lm_fixed_effects2 ate_hbwt3 &lt;- lm_robust(Y~Z,fixed_effects=~bF,data=dat2) ## direct_wts ate_hbwt4 &lt;- lm_robust(Y~Z,data=dat2,weights=hbwt) ## demeaned ate_hbwt5 &lt;- lm_robust(I(Y-ave(Y,b))~I(Z-ave(Z,b)),data=dat2) ## List all hbwtates&lt;-c( simple_block=ate_hbwt1, lm_fixed_effects1=ate_hbwt2$coefficients[[&quot;Z&quot;]], lm_fixed_effects2=ate_hbwt3$coefficients[[&quot;Z&quot;]], direct_wts=ate_hbwt4$coefficients[[&quot;Z&quot;]], demeaned=ate_hbwt5$coefficient[[2]] ) hbwtates simple_block lm_fixed_effects1 lm_fixed_effects2 direct_wts demeaned -13981 -13981 -13981 -13981 -13981 Let&#x2019;s also quickly review their standard errors: ## Comparing the Standard Errors ate_hbwt1se &lt;- sqrt(sum(datB$hbwt01^2 * datB$estvartaub)) hbwtses &lt;- c( simple_block=ate_hbwt1se, lm_fixed_effects1=ate_hbwt2$std.error[[&quot;Z&quot;]], lm_fixed_effects2=ate_hbwt3$std.error[[&quot;Z&quot;]], direct_wts=ate_hbwt4$std.error[[&quot;Z&quot;]], demeaned=ate_hbwt5$std.error[[2]] ) hbwtses simple_block lm_fixed_effects1 lm_fixed_effects2 direct_wts demeaned 328.7 716.6 716.6 788.3 705.4 Now, we claimed that the block size weighted estimator is unbiased but perhaps less precise than the precision-weighted estimator. We&#x2019;ll use DeclareDesign to compare the performance of those estimators and illustrate our point. We implement those estimators as functions passed to the diagnose_design function in the next code block. ## Define estimator functions employed in the simulation below # Two options that don&apos;t account for blocking estnowtHC2 &lt;- declare_estimator(Y~Z, inquiry=theestimand, .method=lm_robust, label=&quot;E1: Ignores Blocks, Design (HC2) SE&quot;) estnowtIID &lt;- declare_estimator(Y~Z, inquiry=theestimand, .method=lm, label=&quot;E0: Ignores Blocks, OLS SE&quot;) # Two options applying block-size weights estnbwt1 &lt;- declare_estimator(Y~Z, inquiry=theestimand, .method=difference_in_means, blocks=b, label=&quot;E2: Diff Means Block Size Weights, Design SE&quot;) estnbwt2 &lt;- declare_estimator(Y~Z, inquiry=theestimand, .method=lm_lin, covariates=~bF, label=&quot;E3: Treatment Interaction with Block Indicators, Design SE&quot;) # Using the BFE package (also block-size weights) iwe_est_fun &lt;- function(data) { obj &lt;- EstimateIWE(y=&quot;Y&quot;, treatment=&quot;Z&quot;, group=&quot;bF&quot;, controls=NULL, data=data) res &lt;- summary.iwe(obj)[&quot;SWE&quot;,] res$term &lt;- &quot;Z&quot; return(res) } estnbwt3 &lt;- declare_estimator(handler=label_estimator(iwe_est_fun), inquiry=theestimand, label=&quot;E4: Treatment Interaction with Block Indicators, Design SE&quot;) # Another block-size-weighted option (via regression weights) nbwt_est_fun &lt;- function(data){ data$newnbwt &lt;- with(data, (Z/pib) + ((1-Z)/(1-pib))) obj &lt;- lm_robust(Y~Z,data=data, weights=newnbwt) res &lt;- tidy(obj) %&gt;% filter(term==&quot;Z&quot;) return(res) } estnbwt4 &lt;- declare_estimator(handler=label_estimator(nbwt_est_fun), inquiry=theestimand, label=&quot;E5: Least Squares with Block Size Weights, Design SE&quot;) # Two precision-weighted options esthbwt1 &lt;- declare_estimator(Y~Z+bF, inquiry=theestimand, .method=lm_robust, label=&quot;E6: Precision Weights via Fixed Effects, Design SE&quot;) esthbwt2 &lt;- declare_estimator(Y~Z, inquiry=theestimand, .method=lm_robust, fixed_effects=~bF, label=&quot;E7: Precision Weights via Demeaning, Design SE&quot;) # Another precision-weighted option (regression weights) hbwt_est_fun &lt;- function(data){ data$newnbwt &lt;- with(data, (Z/pib) + ((1-Z)/(1-pib))) data$newhbwt &lt;- with(data, newnbwt * (pib * (1 - pib))) obj &lt;- lm_robust(Y~Z,data=data, weights=newhbwt) res &lt;- tidy(obj) %&gt;% filter(term==&quot;Z&quot;) return(res) } esthbwt3 &lt;- declare_estimator(handler=label_estimator(hbwt_est_fun), inquiry=theestimand, label=&quot;E8: Direct Precision Weights, Design SE&quot;) # A final precision-weighted option (demeaning) direct_demean_fun &lt;- function(data){ data$Y &lt;- with(data, Y - ave(Y,b)) data$Z &lt;- with(data, Z - ave(Z,b)) obj &lt;- lm_robust(Y~Z, data=data) data.frame(term = &quot;Z&quot; , estimate = obj$coefficients[[2]], std.error = obj$std.error[[2]], statistic = obj$statistic[[2]], p.value=obj$p.value[[2]], conf.low=obj$conf.low[[2]], conf.high=obj$conf.high[[2]], df=obj$df[[2]], outcome=&quot;Y&quot;) } esthbwt4 &lt;- declare_estimator(handler=label_estimator(direct_demean_fun), inquiry=theestimand, label=&quot;E9: Direct Demeaning, Design SE&quot;) ## Vector of all the estimator function names just created ## (via regular expression) theestimators &lt;- ls(patt=&quot;^est.*?wt&quot;) theestimators ## Get results for each estimator checkest &lt;- sapply( theestimators, function(x){ get(x)(as.data.frame(dat2))[c(&quot;estimate&quot;,&quot;std.error&quot;)] } ) ## Combine all of these design objects thedesignPlusEstimators &lt;- thedesign2 + estnowtHC2 + estnowtIID + estnbwt1 + estnbwt2 + estnbwt3 + estnbwt4 + esthbwt1 + esthbwt2 + esthbwt3 + esthbwt4 ## Update the default diagnosands for this simulation diagnosands &lt;- declare_diagnosands( mean_estimand = mean(estimand), mean_estimate = mean(estimate), bias = mean(estimate - estimand), sd_estimate = sqrt(pop.var(estimate)), mean_se = mean(std.error), rmse = sqrt(mean((estimate - estimand) ^ 2)), power = mean(p.value &lt;= 0.05), coverage = mean(estimand &lt;= conf.high &amp; estimand &gt;= conf.low) ) ## Perform the simulation sims &lt;- 200 set.seed(12345) thediagnosis &lt;- diagnose_design(thedesignPlusEstimators, sims=sims, bootstrap_sims = 0, diagnosands = diagnosands) We can see in the diagnostic output below that the estimators using block-size weights (E2, E3, E4, or E5) all eliminate bias (within simulation error).25 The estimators ignoring blocks (E0 and E1), are biased, and in this particular simulation the precision weighed estimators (E6&#x2013;E9) are also highly biased &#x2014; with some of them also producing poor &#x201C;coverage&#x201D; or false positive rates (E7 and E9). This output also shows us the &#x201C;SD Estimate&#x201D; (which is a good estimate of the standard error of the estimate) and the &#x201C;Mean SE&#x201D; (which is the average of the analytic estimates of the standard error). In the case of E2, E3, E4 or E5 the Mean SE is larger than the SD Estimate &#x2014; this is good in that it means that our analytic standard errors will be conservative. However, we also would prefer that our analytic standard errors not be too conservative. kable(reshape_diagnosis(thediagnosis)[, c(3, 6:10, 13)]) Estimator Mean Estimand Mean Estimate Bias SD Estimate Mean Se Coverage E0: Ignores Blocks, OLS SE -12900.57 -12355.37 545.20 105.75 714.11 1.00 E1: Ignores Blocks, Design (HC2) SE -12900.57 -12355.37 545.20 105.75 352.66 0.94 E2: Diff Means Block Size Weights, Design SE -12900.57 -12900.11 0.46 115.36 165.80 0.99 E3: Treatment Interaction with Block Indicators, Design SE -12900.57 -12900.11 0.46 115.36 165.80 0.99 E4: Treatment Interaction with Block Indicators, Design SE -12900.57 -12900.11 0.46 115.36 158.45 0.99 E5: Least Squares with Block Size Weights, Design SE -12900.57 -12900.11 0.46 115.36 444.82 1.00 E6: Precision Weights via Fixed Effects, Design SE -12900.57 -14143.05 -1242.48 208.11 713.30 0.74 E7: Precision Weights via Demeaning, Design SE -12900.57 -14143.05 -1242.48 208.11 713.30 0.74 E8: Direct Precision Weights, Design SE -12900.57 -14143.05 -1242.48 208.11 791.40 0.94 E9: Direct Demeaning, Design SE -12900.57 -14143.05 -1242.48 208.11 702.44 0.73 The simulated outcome data we used here is highly skewed by design. This helps illustrate that the biases of precision-weighted estimates could be exacerbated by common problems in administrative data like skewed outcomes or zero-inflation (i.e., many 0s). In this case, the skew even prevents us from illustrating the precision benefits of harmonic weights. One solution we could apply in this case is rank-transforming the outcome measure. This transformed outcome nearly erases the bias from the block-size weighted estimators, and the precision-weighted approaches also perform as expected. However, ignoring the blocked design is still a problem &#x2014; E0 and E1 continue to show substantial bias. Moreover, notice here and above that although using regression weights alone to apply these blocking adjustments (rather than, e.g., an appropriate fixed effects specification) produces the right estimates, it does so at the cost of a larger standard error. ## Define a function to rank-transform the potential outcomes po_functionNorm &lt;- function(data){ data &lt;- data %&gt;% group_by(b) %&gt;% mutate( Y_Z_0=rank(y0), Y_Z_1=rank(y1) ) return(as.data.frame(data)) } ## Redefine relevant DeclareDesign objects theysNorm &lt;- declare_potential_outcomes(handler = po_functionNorm) thedesignNorm &lt;- thepop2 + theysNorm + theestimand + theassign + theobsident datNorm &lt;- draw_data(thedesignNorm) thedesignPlusEstimatorsNorm &lt;- thedesignNorm + estnowtHC2 + estnowtIID + estnbwt1 + estnbwt2 + estnbwt3 + estnbwt4 + esthbwt1 + esthbwt2 + esthbwt3 + esthbwt4 ## Perform a new simulation sims &lt;- 200 thediagnosisNorm &lt;- diagnose_design(thedesignPlusEstimatorsNorm, sims = sims, bootstrap_sims = 0, diagnosands = diagnosands) ## View results kable(reshape_diagnosis(thediagnosisNorm)[, c(3, 6:10, 13)]) Estimator Mean Estimand Mean Estimate Bias SD Estimate Mean Se Coverage E0: Ignores Blocks, OLS SE 0.00 -127.08 -127.08 1.84 17.81 0.00 E1: Ignores Blocks, Design (HC2) SE 0.00 -127.08 -127.08 1.84 14.05 0.00 E2: Diff Means Block Size Weights, Design SE 0.00 0.11 0.11 1.69 5.49 1.00 E3: Treatment Interaction with Block Indicators, Design SE 0.00 0.11 0.11 1.69 5.49 1.00 E4: Treatment Interaction with Block Indicators, Design SE 0.00 0.11 0.11 1.69 5.53 1.00 E5: Least Squares with Block Size Weights, Design SE 0.00 0.11 0.11 1.69 15.66 1.00 E6: Precision Weights via Fixed Effects, Design SE 0.00 0.11 0.11 1.35 4.09 1.00 E7: Precision Weights via Demeaning, Design SE 0.00 0.11 0.11 1.35 4.09 1.00 E8: Direct Precision Weights, Design SE 0.00 0.11 0.11 1.35 15.28 1.00 E9: Direct Demeaning, Design SE 0.00 0.11 0.11 1.35 4.09 1.00 In a pair-randomized design, for instance, we know that bias should not arise from ignoring the blocking structure. But we could still improve precision by taking the pairing into account (Bowers 2011). This next simulation changes the design to still have unequal sized blocks, but with a uniform probability of treatment assignment in each. Here, only two estimators show appreciable bias (E5 and E8). However, ignoring the blocks leads to overly conservative standard errors. ## Re-define relevant declare design objects theassignEqual &lt;- declare_assignment(Z=block_ra(blocks = bF)) thedesignNormEqual &lt;- thepop2 + theysNorm + theestimand + theassignEqual + theobsident datNormEqual &lt;- draw_data(thedesignNormEqual) thedesignPlusEstimatorsNormEqual &lt;- thedesignNormEqual + estnowtHC2 + estnowtIID + estnbwt1 + estnbwt2 + estnbwt3 + estnbwt4 + esthbwt1 + esthbwt2 + esthbwt3 + esthbwt4 ## Perform a new simulation sims &lt;- 200 set.seed(12345) thediagnosisNormEqual &lt;- diagnose_design(thedesignPlusEstimatorsNormEqual, sims = sims, bootstrap_sims = 0, diagnosands = diagnosands) ## View results kable(reshape_diagnosis(thediagnosisNormEqual)[, c(3, 6:10, 13)]) Estimator Mean Estimand Mean Estimate Bias SD Estimate Mean Se Coverage E0: Ignores Blocks, OLS SE 0.00 -0.34 -0.34 4.74 12.40 1.00 E1: Ignores Blocks, Design (HC2) SE 0.00 -0.34 -0.34 4.74 12.40 1.00 E2: Diff Means Block Size Weights, Design SE 0.00 -0.34 -0.34 4.74 7.36 1.00 E3: Treatment Interaction with Block Indicators, Design SE 0.00 -0.34 -0.34 4.74 7.36 1.00 E4: Treatment Interaction with Block Indicators, Design SE 0.00 -0.34 -0.34 4.74 7.41 1.00 E5: Least Squares with Block Size Weights, Design SE 0.00 77.57 77.57 4.09 11.89 0.00 E6: Precision Weights via Fixed Effects, Design SE 0.00 -0.34 -0.34 4.74 7.36 1.00 E7: Precision Weights via Demeaning, Design SE 0.00 -0.34 -0.34 4.74 7.36 1.00 E8: Direct Precision Weights, Design SE 0.00 127.05 127.05 2.71 10.95 0.00 E9: Direct Demeaning, Design SE 0.00 -0.34 -0.34 4.74 7.36 1.00 5.4.2.1 Summary of Approaches to the Analysis of Block Randomized Trials Our team prefers block randomized trials because of their potential to increase statistical power, as well as their ability to let us focus on subgroup effects. Our approach has been guided by evidence like the simulations we present above: we &#x201C;analyze as we randomize&#x201D; to avoid bias and increase statistical power, and we are careful in our choice of weighting approaches. Different designs will require different analytical decisions &#x2014; sometimes we may be willing to trade a small amount of bias for a guarantee that our estimates will be closer to the truth and more precise, on average (i.e.&#xA0;get lower mean-squared error, but more bias). Other studies will be so large or small that one or another strategy will become obvious. We use our Analysis Plans to explain our choices, and simulation studies like those shown here when we are uncertain about the applicability of statistical rules of thumb to any given design. 5.5 Cluster-randomized trials In a cluster randomized trial, treatment is assigned at the level of larger groups of units, called &#x201C;clusters,&#x201D; instead of at the individual level.26 These studies tend to distinguish signal from noise less effectively than an experiment where we assign treatment directly to individuals &#x2014; i.e., they have less precision. The number of independent pieces of information available to learn about the treatment effect will generally be closer to the number of clusters (each of which tends to be assigned to treatment independently of each other) than the number of dependent observations within a cluster (See EGAP&#x2019;s 10 Things You Need to Know about Cluster Randomization).27 Since we analyze as we randomize, a cluster randomized experiment may require that we (1) weight cluster-level average treatment effects by cluster size if we are trying to estimate the average of the individual level causal effects (Middleton and Aronow 2015). They also require that we (2) change how we calculate standard errors and ppp-values to account for the fact that uncertainty is generated at the level of the cluster and not at the level of the individual (Hansen and Bowers 2008; Gerber and Green 2012). For example, imagine that we had 10 clusters (administrative offices, physicians groups, etc.) with half assigned to treatment and half assigned to control. ## Create a copy of dat2 to use for our clustering examples dat3 &lt;- dat2 dat3$cluster &lt;- dat3$b dat3$clusterF &lt;- factor(dat3$cluster) ndat3 &lt;- nrow(dat3) ## Randomly assign half of the clusters to treatment and half to control set.seed(12345) dat3$Zcluster &lt;- cluster_ra(cluster=dat3$cluster) with(dat3,table(Zcluster,cluster)) cluster Zcluster 1 2 3 4 5 6 7 8 9 10 0 8 0 30 40 0 0 0 0 100 800 1 0 20 0 0 50 60 70 80 0 0 Although our example data has 1258 observations, we do not have 1258 pieces of independent information about the effect of the treatment because people were assigned in groups. Rather we have some amount of information in between 1258 and the number of clusters (in this case, 10). We can see above that the number of people within each cluster &#x2014; and notice that all of the people are coded as either control or treatment because assignment is at the level of the cluster. Before continuing, let&#x2019;s set up some DeclareDesign elements for a simulation of clustered experimental designs: ## Get weights for one estimation strategy used below library(ICC) iccres &lt;- ICCest(x=clusterF,y=Y,data=dat3) dat3$varweight &lt;- 1/(iccres$vara + (iccres$varw/dat3$nb)) ## Define various DeclareDesign elements thepop3 &lt;- declare_population(dat3) po_functionCluster &lt;- function(data){ data$Y_Zcluster_0 &lt;- data$y0 data$Y_Zcluster_1 &lt;- data$y1 data } theysCluster &lt;- declare_potential_outcomes(handler = po_functionCluster) theestimandCluster &lt;- declare_inquiry(ATE = mean(Y_Zcluster_1 - Y_Zcluster_0)) theassignCluster &lt;- declare_assignment(Zcluster=cluster_ra(clusters=cluster)) theobsidentCluster &lt;- declare_reveal(Y, Zcluster) thedesignCluster &lt;- thepop3 + theysCluster + theestimandCluster + theassignCluster + theobsidentCluster datCluster &lt;- draw_data(thedesignCluster) In everyday practice, with more than about 50 (equally-sized) clusters, we often produce estimates using more or less the same kinds estimators as those above, but changing our standard error calculations to instead rely on CR2 cluster-robust standard error (Pustejovsky 2019). Here are two approaches to such adjustment in R, using the estimatr package. The difference_in_means() function: ## CR2 via difference in means estAndSE4a &lt;- difference_in_means(Y~Zcluster, data=datCluster, clusters=cluster) estAndSE4a Design: Clustered Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF Zcluster -15597 8336 -1.871 0.1232 -37356 6162 4.76 The lm_robust() function: ## CR2 via linear regression estAndSE4b &lt;- lm_robust(Y~Zcluster, data=datCluster, clusters=cluster, se_type=&quot;CR2&quot;) estAndSE4b Estimate Std. Error t value Pr(&gt;|t|) CI Lower CI Upper DF (Intercept) 15707 8332 1.885 0.1409 -8542 39955 3.578 Zcluster -15597 8336 -1.871 0.1232 -37356 6162 4.760 5.5.1 Bias when cluster size is correlated with potential outcomes When clusters have unequal sizes, in addition to adjusting our standard error calculations, we might worry about bias as well (Middleton and Aronow 2015) (see also https://declaredesign.org/blog/bias-cluster-randomized-trials.html). Here, we demonstrate how bias could emerge in the analysis of a cluster randomized trial, as well as how to reduce that bias. ## Define estimators that can be repeated in the simulation below ## No adjustment for clustering estC0 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm, label=&quot;C0: Ignores Clusters, IID SE&quot;) ## HC2 SEs estC1 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm_robust, label=&quot;C1: Ignores Clusters, CR2 SE&quot;) ## Clustered SEs (CR1; Stata default) estC2 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm_robust, clusters=cluster, se_type=&quot;stata&quot;, label=&quot;C2: OLS Clusters, Stata RCSE&quot;) ## CR2 SEs (difference in means) estC3 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=difference_in_means, clusters = cluster, label=&quot;C3: Diff Means Cluster, CR2 SE&quot;) ## CR2 SEs (linear regression) estC4 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm_robust, clusters = cluster, se_type=&quot;CR2&quot;, label=&quot;C4: OLS Cluster, CR2 SE&quot;) ## Horvitz-Thompson estimator with clustering estC5 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=horvitz_thompson, clusters=cluster, simple=FALSE, condition_prs=.5, label=&quot;C5: Horvitz-Thompson Cluster, Young SE&quot;) ## Linear regression, CR2 errors, weight by cluster size estC6 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm_robust, weights = nb, clusters=cluster, se_type=&quot;CR2&quot;, label=&quot;C6: OLS Clusters with ClusterSize Weights, CR2 RCSE&quot;) ## Linear regression, CR2 errors, control for cluster size, variance weights estC7 &lt;- declare_estimator(Y~Zcluster+nb, inquiry=theestimand, .method=lm_robust, weights=varweight, clusters=cluster, se_type=&quot;CR2&quot;, label=&quot;C7: OLS Clusters with Weights, CR2 RCSE&quot;) ## Linear regression, CR2 errors, control for cluster size estC8 &lt;- declare_estimator(Y~Zcluster+nb, inquiry=theestimand, .method=lm_robust, clusters=cluster, se_type=&quot;CR2&quot;, label=&quot;C8: OLS Clusters with adj for cluster size, CR2 RCSE&quot;) ## Linear regression, CR2 errors, lin estimation for cluster size estC9 &lt;- declare_estimator(Y~Zcluster, inquiry=theestimand, .method=lm_lin, covariates=~nb, clusters=cluster, se_type=&quot;CR2&quot;, label=&quot;C9: OLS Clusters with adj for cluster size, CR2 RCSE&quot;) ## Add all these estimators to the design thedesignClusterPlusEstimators &lt;- thedesignCluster + estC0 + estC1 + estC2 + estC3 + estC4 + estC5 + estC6 + estC7 + estC8 + estC9 ## Get a character vector of the estimators just created ## (using a regular expression) theestimatorsC &lt;- ls(patt=&quot;^estC[0-9]&quot;) ## Apply each of these estimators to the data ## (get(x) calls an object with this name from the environment; ## this function is then applied to the dataframe in question) checkestC &lt;- sapply( theestimatorsC, function(x){ get(x)(as.data.frame(datCluster))[c(&quot;estimate&quot;,&quot;std.error&quot;)] } ) ## Review the results checkestC ## Simulate the performance of these estimators sims &lt;- 200 set.seed(12345) thediagnosisCluster &lt;- diagnose_design(thedesignClusterPlusEstimators, sims = sims, bootstrap_sims = 0) The results of our simulation show how certain approaches can yield very biased estimates, while other approaches can reduce the bias. With variaion in cluster size, the C5 and C6 estimators have the lowest bias in this particular example (with very few clusters). We also see evidence of problems with some of these standard errors &#x2014; the actual standard errors (in &#x201C;SD Estimate&#x201D;) should be much higher than those estimated by the approaches ignoring the clustered design (C0 and C1). kable(reshape_diagnosis(thediagnosisCluster)[, c(3, 6:9, 11:12)]) Estimator Mean Estimand Mean Estimate Bias SD Estimate Power Coverage C0: Ignores Clusters, IID SE -12900.57 -15166.65 -2266.08 5916.55 1.00 0.22 C1: Ignores Clusters, CR2 SE -12900.57 -15166.65 -2266.08 5916.55 1.00 0.20 C2: OLS Clusters, Stata RCSE -12900.57 -15166.65 -2266.08 5916.55 0.76 0.85 C3: Diff Means Cluster, CR2 SE -12900.57 -15166.65 -2266.08 5916.55 0.32 0.94 C4: OLS Cluster, CR2 SE -12900.57 -15166.65 -2266.08 5916.55 0.32 0.94 C5: Horvitz-Thompson Cluster, Young SE -12900.57 -12710.34 190.23 5595.09 0.32 0.86 C6: OLS Clusters with ClusterSize Weights, CR2 RCSE -12900.57 -12670.05 230.51 5931.54 0.24 0.92 C7: OLS Clusters with Weights, CR2 RCSE -12900.57 -19047.82 -6147.26 6717.76 0.24 0.92 C8: OLS Clusters with adj for cluster size, CR2 RCSE -12900.57 -19120.43 -6219.86 6709.44 0.26 0.92 C9: OLS Clusters with adj for cluster size, CR2 RCSE -12900.57 61051.64 73952.20 124497.09 0.06 0.96 5.5.2 Incorrect false positive rates from tests and confidence intervals When we have few clusters, analytic standard errors could lead to incorrect false positive rates for our hypothesis tests or confidence intervals, even after we adjust our standard errors for clustering (e.g., using the default adjustment in Stata, CR1). The CR2 errors OES prefers tend to perform slightly better in settings with fewer clusters (Pustejovsky 2019). We demonstrate below using CR2 errors rather than CR1 can sometimes help ensure that the false positive rates of our hypothesis tests is controlled correctly. To distinguish between (1) the problems of bias arising from unequal sized clusters and (2) problems of false positive rates or poor covereage arising from the presence of few clusters, we use a design with equal numbers of units per cluster: with(dat1,table(Zcluster,buildingID)) buildingID Zcluster 1 2 3 4 5 6 7 8 9 10 C 10 0 10 10 0 0 0 0 10 10 T 0 10 0 0 10 10 10 10 0 0 ## Break any relationship between treatment and outcomes by permuting ## or shuffling the treatment variable. This means that H0, the null, ## of no effects is true. checkFP &lt;- function(dat, setype=&quot;CR2&quot;){ dat$newZ &lt;- cluster_ra(cluster=dat$buildingID) newest &lt;- lm_robust(Y~newZ, dat=dat, clusters=buildingID, se_type=setype) return(nullp = newest$p.value[&quot;newZ&quot;]) } ## Construct a separate dataset for this example smalldat &lt;- dat1[, c(&quot;Y&quot;,&quot;buildingID&quot;)] ## Apply the function above 1000 times (CR2) set.seed(123) fpresCR2 &lt;- replicate(1000, checkFP(dat=smalldat)) ## Apply the function above 1000 times (CR1, Stata) set.seed(123) fpresStata &lt;- replicate(1000, checkFP(dat=smalldat, setype=&quot;stata&quot;)) ## Summarize the results fprateCR205 &lt;- mean(fpresCR2 &lt;= .05) fprateCR205 [1] 0.045 fprateStata05 &lt;- mean(fpresStata &lt;= .05) fprateStata05 [1] 0.054 In this case, with 10 equal sized clusters, a simple outcome, and equal numbers of clusters in treatment and control, we see that the CR2 standard error controls the false positive rate (less than 5% of the 1000 simulations testing a true null hypothesis of no effect return a ppp-value of less than .05) while the default &#x201C;Stata&#x201D; (CR1) standard error has a slightly too high false positive rate of 0.054 at the 5% error level. If a simulation like the one above shows false positive rate problems with the CR2 standard error as well, we may prefer to rely on permutation-based randomization inference. For more discussion of issues with standard error calculation in the presence of few clusters, and examples of some other possible approaches to testing with few clusters, see Esarey and Menger (2019). References "],
["poweranalysis.html", "Chapter 6 Power Analysis 6.1 An example of the off-the-shelf approach 6.2 An example of the simulation approach 6.3 When to use which approach 6.4 Additional examples of the simulation approach", " Chapter 6 Power Analysis In this chapter, we provide examples of how we assess statistical power for different experimental research designs. We often prefer to use simulation to assess the power of different research designs because we rarely have designs that fit easily into the assumptions made by analytic tools. By &#x201C;analytic tools,&#x201D; we refer to methods of calculating power (or a minimum required sample size, etc.) based on mathematical derivations under particular assumptions. For instance, in an i.i.d. two-arm design with random assignment of half the sample, no covariates, a roughly normally distributed outcome, and equal variance in each treatment group, it&#x2019;s possible show that we would have 80% power to estimate a difference in means of &#x394;\\Delta&#x394; if we collect data on approximately n=(5.6&#x3C3;/&#x394;)2n = (5.6 \\sigma /\\Delta)^{2}n=(5.6&#x3C3;/&#x394;)2 observations, where &#x3C3;\\sigma&#x3C3; is the overall standard deviation of the outcome.28 But we frequently consider situations where such derivations are not readily available. 6.1 An example of the off-the-shelf approach To demonstrate how analytical power analysis works in principle, consider the R function power.t.test(). This can be used for power calculations in designs where a two-sample t-test is an appropriate estimation strategy (with no adjustment for blocking, clustering, or covariates). When using this function, there are three parameters that we&#x2019;re most concerned with, two of which must be specified by the user. The third is then calculated and returned by the function. These are: n = sample size, or number of observations per treatment group delta = the target effect size, or a minimum detectable effect (MDE) power = the probability of detecting an effect if in fact there is a true effect of size delta Note that there is also the parameter sd, representing the standard deviation of the outcome. This is set to 1 by default unless power.t.test() is instructed otherwise. Say, for example, you want to know the MDE for a two-arm study with 1,000 participants, of which half are assigned to treatment. Using power.t.test() you would specify: power.t.test( n = 500, # The number of observations per treatment arm power = 0.8 # The traditional power threshold of 80% ) Two-sample t test power calculation n = 500 delta = 0.1774 sd = 1 sig.level = 0.05 power = 0.8 alternative = two.sided NOTE: n is number in *each* group If all we wanted to extract was the MDE, we could instead write: power.t.test(n = 500, power = 0.8)$delta [1] 0.1774 If we request the sample size instead, we can illustrate that this is applying an expression like the one we mention above: n=(5.6/0.1773605)2&#x2248;1000n = (5.6/0.1773605)^{2} \\approx 1000n=(5.6/0.1773605)2&#x2248;1000 And now via R code: power.t.test(delta = 0.1773605, power = 0.8)$n * 2 [1] 1000 If you need to, you can adjust other parameters, like the standard deviation of the outcome, the level of the test, or whether the test is one-sided rather than two-sided. There are also other functions available for different types of outcomes. For example, if you have a binary response, you can use power.prop.test() to calculate power for a similar kind of simple difference in proportions test. An equivalent approach in Stata is as follows: power twomeans 0, power(0.8) n(1000) sd(1) Stata users can learn more about available tools by checking out Stata&#x2019;s plethora of relevant help files. 6.2 An example of the simulation approach We can compare the output of power.t.test() to the output from a simulation-based (i.e., computational) approach, which we illustrate in the code chunk below. Notice that our example below relies on manually-written functions that could be copied and adapted by OES team members to the needs of different projects. This code is more detailed than we need for simple cases, but it provides useful flexibility for simulating more complicated designs (particularly designs we cannot specify as easily within the DeclareDesign framework). ## OES Power Simulation Toolkit: ## Replicate, Estimate, Evaluate (REE) ## ## replicate_design(...) ---: Generate replicates of a simulated dataset ## estimate(...) -----------: Estimate the null test-stat for treatment(s). ## evaluate_power(...) -----: Evaluate power to detect non-zero effects. ## evaluate_mde(...) -------: Find MDE, searching over range of effect sizes. ## evaluate_bias(...) ------: Compute bias and other diagnostics. ## Required packages require(magrittr) require(fabricatr) require(foreach) ##### REPLICATE a hypothetical design R times ##### # Inputs: # - (1) number of replicates desired # - (2) additional arguments that are passed to fabricate() (see the ...). # - Generally, each arg is a separate variable to generate. # - Later vars can be a function of earlier ones. # - See our examples below, it&apos;s simpler than it sounds! replicate_design &lt;- function(R = 200, ...) { # Function: produce one draw of the simulated dataset/design design &lt;- function() { fabricatr::fabricate( ... ) %&gt;% list } # Use replicate() to replicate that design R times rep &lt;- replicate( n = R, expr = design() ) # Output will be a list of dataframes. # For each, add a variable indicating which sim# it is for(i in 1:length(rep)) { rep[[i]] &lt;- rep[[i]] %&gt;% dplyr::mutate( sim = i ) } return(rep) } ##### ESTIMATE results using those replicated dfs ##### # Inputs: # - (1) Estimation formula (y ~ x1 + x2 + ...) # - (2) Variables(s) we want to be powered to estimate the effects of # - Generally just the treatment var(s) # - (3) Data the estimator should be applied to (list of dfs) # - (4) The estimator (the default is OLS with HC2 errors) estimate &lt;- function( formula, vars, data = NULL, estimator = estimatr::lm_robust ) { # Pass the list of dfs to map(). # map() applies the procedure specified below to each df in the list. data %&gt;% purrr::map( # For each dataframe in the list, apply the specified estimator, # using the specified formula. ~ estimator( formula, data = . ) %&gt;% # tidy up the results and specify the rows of estimates to keep estimatr::tidy() %&gt;% dplyr::filter( .data$term %in% vars ) ) %&gt;% # Append the results from each sim replicate into a single dataframe dplyr::bind_rows() %&gt;% # Add some more useful labels dplyr::mutate( sim = rep(1:length(data), each = n() / length(data)), term = factor(.data$term, levels = vars) ) } ##### EVALUATE power of the design ##### # Inputs: # - (1) Results produced by estimate() above # - (2) Hypothetical effects we want power estimates for # - (3) Desired alpha (significance) level evaluate_power &lt;- function(data, delta, level = 0.05) { # Make sure delta (may be scalar or vector) was specified if (missing(delta)) { stop(&quot;Specify &apos;delta&apos; to proceed.&quot;) } # Apply the following (i.e., after %do%) to each delta separately, # appending the results with bind_rows at the end. foreach::foreach( i = 1:length(delta), .combine = &quot;bind_rows&quot; ) %do% { # Start with the df of estimates data %&gt;% # Create variables storing the relevant delta and new test stat dplyr::mutate( delta = delta[i], new_statistic = (.data$estimate + .data$delta) / .data$std.error ) %&gt;% # Similar to group_by, result here is list of dfs for each term dplyr::group_split(.data$term) %&gt;% # Separately for the df for each term, get p for each replicate purrr::map( ~ { tibble::tibble( term = .$term, delta = .$delta, p.value = foreach( j = 1:length(.$new_statistic), .combine = &quot;c&quot; ) %do% mean(abs(.$statistic) &gt;= abs(.$new_statistic[j])) ) } ) } %&gt;% # Organize by term and delta group_by(.data$term, .data$delta) %&gt;% # Average over repliacates to get power for each term/delta combination summarize( power = mean(.data$p.value &lt;= level), .groups = &quot;drop&quot; ) } ##### EVALUATE the min. detectable effect ##### # Helps summarize the results of evaluate_power() above, # basically a wrapper for evaluate_power() # Inputs: # - (1) Results produced by estimate() above # - (2) Range of hypothetical effects we want to consider (delta above) # - (3) How fine-grained do we want changes in delta to be? # - (4) Alpha (significance) level # - (5) Minimum power we want to accept evaluate_mde &lt;- function( data, delta_range = c(0, 1), how_granular = 0.01, level = 0.05, min_power = 0.8 ) { # Use the function designed above to get power estimates eval &lt;- evaluate_power( data = data, delta = seq(delta_range[1], delta_range[2], how_granular), level = level ) %&gt;% # Organize data by term dplyr::group_by( .data$term ) %&gt;% # Get the MDE at our desired power level for each term dplyr::summarize( MDE = min(.data$delta[.data$power &gt;= min_power]), .groups = &quot;drop&quot; ) return(eval) } ##### EVALUATE Bias ##### # Helps summarize the results of estimate() above. # Pass results of estimate() to this function. # Inputs: # - (1) Data produced by estimate() above # - (2) True ATE evaluate_bias &lt;- function( data, ATE = 0 ) { # Start with the estimates for each replicated dataset smry &lt;- data %&gt;% # Add a variable representing the true ATE dplyr::mutate( ATE = rep(ATE, len = n()) ) %&gt;% # Organize estimates by term dplyr::group_by( .data$term ) %&gt;% # Summarize across replicates, within each term dplyr::summarize( &quot;True ATE&quot; = unique(.data$ATE), &quot;Mean Estimate&quot; = mean(.data$estimate), Bias = mean(.data$estimate - .data$ATE), MSE = mean((.data$estimate - .data$ATE)^2), Coverage = mean( .data$conf.low &lt;= .data$ATE &amp; .data$conf.high &gt;= .data$ATE ), &quot;SD of Estimates&quot; = sd(.data$estimate), &quot;Mean SE&quot; = mean(.data$std.error), Power = mean(.data$p.value &lt;= 0.05), .groups = &quot;drop&quot; ) return(smry) } Results are shown in the subsequent figure. Though the computational estimates are slightly different, they comport quite well with the analytic estimates. ## Parameters used for both sets of calculations n &lt;- 1000 # Sample size d &lt;- 0.2 # Effect size to consider ## Analytical power estimates power_data &lt;- tibble( d = seq(0, 0.5, len = 200), power = power.t.test(n = n / 2, delta = d)$power ) ## Save initial plot; add simulation results below g &lt;- ggplot(power_data) + geom_line(aes(d, power, linetype = &quot;power.t.test()&quot;)) + labs( x = expression(delta), y = &quot;Power&quot;, title = &quot;Power for Simple Difference in Means Test&quot; ) + scale_y_continuous( n.breaks = 6 ) + geom_hline( yintercept = 0.8, col = &quot;grey25&quot;, alpha = 08 ) + ggridges::theme_ridges( center_axis_labels = TRUE, font_size = 10 ) ## Comutational power estimates, using the functions above sim_power_data &lt;- replicate_design( N = n, y = rnorm(N), x = randomizr::complete_ra( N, m = N / 2 ) ) %&gt;% estimate( form = y ~ x, vars = &quot;x&quot; ) %&gt;% evaluate_power( delta = seq(0, 0.5, len = 200) ) ## Add results from the simulation to the plot and compare g + geom_line( data = sim_power_data, aes(delta, power, linetype = &quot;simulation&quot;), color = &quot;grey25&quot; ) + labs( linetype = &quot;Method:&quot; ) + theme( legend.position = &quot;bottom&quot; ) As mentioned above, we produced those computational estimates using some pre-written functions that are currently housed in OES&#x2019;s GitHub code library. These functions are also laid out and explained step-by-step in comments in a code chunk above. These tools are designed around a simple workflow, and they should help remove some of the programming that may otherwise be a barrier to project teams calculating power computationally. The workflow proceeds as follows: Replicate Estimate Evaluate The first step, Replicate, entails specifying an example data-generation process (which may include only an outcome variable and treatment assignment) and simulating it multiple times to create a series of randomly generated datasets. Each individual dataset produced is a sample replicate. The next step, Estimate, entails estimating effects for select treatments within each sample replicate. We can use those estimates to produce a distribution of test statistics for each effect size of interest. Finally, the last step, Evaluate, entails using those test statistics to evaluate our power to detect a range of different effect sizes. This workflow is supported by three functions: replicate_design(), estimate(), and evaluate_power(). Here&#x2019;s the simulation code used to generate Figure 1, in more detail: ## 1. Replicate: # Output is a list of dfs rep &lt;- replicate_design( R = 200, # Number of sample replicates N = 1000, # Sample size of each replicate y = rnorm(N), # Normally distributed response x = rbinom(N, 1, 0.5) # Binary treatment indicator ) ## 2. Estimate: # Output is a dataframe of estimates from each sample replicate est &lt;- estimate( y ~ x, # Regression formula vars = &quot;x&quot;, # Treatment variable(s) data = rep # Sample replicates ) ## 3. Evaluate: # Output is a list of dfs pwr_eval_sim &lt;- evaluate_power( data = est, # Estimates, from estimate() above delta = seq(0, 0.5, len = 200) # Effect sizes to consider ) The final product, pwr_eval_sim above, reports the power for each of the user-specified effect sizes (delta) and (vars) model terms specified when calling estimate(). The output can be used to plot power curves or to compute minimum detectable effects. These functions help make the process of performing computational power analysis for OES projects easier, while still providing ample room for flexibility in both design and estimation strategy. For example, replicate_design() is a wrapper for fabricate() in the fabricatr package. This gives users the ability to generate multi-level or nested data-generating processes, specify additional covariates, or determine whether treatment randomization is done within blocks or by clusters. By default, estimates are returned using lm_robust() from the estimatr package, but alternative estimators can be specified. Say, for example, you have a binary response and a set of covariates, and your design calls for using logistic regression. You could generate estimates for such a design as follows: ## Define logit estimator function logit &lt;- function(...){ glm(..., family = binomial)} ## Pass this to the estimate() function above est &lt;- estimate( y ~ x + z1 + z2, data = rep, estimator = logit ) Other tools for power simulation exist as well. For instance, throughout this SOP, we have used DeclareDesign to simulate hypothetical research designs and compare their performance. And there is no shortage of further simulation examples that can be found online for more specialized use-cases. 6.3 When to use which approach For a simple difference in means test, the programming required for an analytical power analysis is much much less involved. When is computational power analysis worth the extra time investment? To start, in cases where we&#x2019;re interested in the power to detect a simple difference in means, or a difference in proportions for binary responses, it is probably sufficient to use power.t.test() (for means) or power.prop.test() (for proportions). However, OES projects often involve design features or analytic strategies that are difficult to account for using off-the-shelf tools. For example, we often include covariates in our statistical models to enhance the precision of our treatment effect estimates. If the gain in precision is small, then it might not be important to account for this in power calculations in the design phase of the project. But if we expect a substantial gain in precision due to including covariates, then we probably want to account for estimating power. The natural way to do this is by simulation, including the covariates in the &#x201C;replicate&#x201D; and &#x201C;estimate&#x201D; steps above. Accounting for covariates is especially useful if we can use real historical or pre-treatment data that represent the correlations we expect to see between covariates and outcomes in our later analysis of the trial data. More complex design features or analytic strategies may make investing in the simulation approach even more worthwhile, or downright necessary. Examples include heterogeneity in treatment effects, a multi-arm or factorial design, or block randomization with differing probabilities of treatment between blocks &#x2013; none of which is usually easily accounted for with off-the-shelf tools. In the next section, we provide some additional examples of simulations for more complex designs or analytic strategies. 6.4 Additional examples of the simulation approach Here we provide two examples of research designs where simulation is well worth the extra effort. Attendant R code is included to illustrate how we could use the functions above in these cases. 6.4.1 A two-by-two design with interaction One instance where computational power analysis may be worth the investment is in assessing power for a two-by-two factorial design with an interaction. In such a design, the goal is to assess not only the power to detect main effects (the average effect of each individual treatment), but also power to detect a non-zero interaction effect between the treatments. Say we have a design with 1,000 observations and we would like to know the effect of two treatments on a binary outcome with a baseline of 0.25. Each treatment is assigned to M=500M = 500M=500 individuals at random, resulting in four roughly equal sized groups of observations after randomization: (1) a control group, (2) those assigned to treatment 1 but not treatment 2, (3) those assigned to treatment 2 but not treatment 1, and (4) those assigned to both treatment 1 and 2. We can easily calculate power to detect the main effect of each treatment as follows: two_by_two &lt;- ## Basic elements of each simulated sample replicate replicate_design( N = 1000, y = rbinom(N, 1, 0.25), x1 = complete_ra(N, m = N / 2), x2 = complete_ra(N, m = N / 2) ) %&gt;% ## Estimate main and interaction effects estimate( form = y ~ x1 + x2 + x1:x2, vars = c(&quot;x1&quot;, &quot;x2&quot;, &quot;x1:x2&quot;) ) %&gt;% ## Evaluate power evaluate_power( delta = seq(0, 0.25, len = 200) ) Using the output reported in the object two_by_two, we can plot the power curves for each of the main effects and the interaction effect, as shown in Figure 2. ggplot(two_by_two) + ## Add a line representing power for each effect/term geom_line( aes(delta, power, linetype = term) ) + ## Choose linetypes that are easy to distinguish scale_linetype_manual(values = c(&quot;solid&quot;, &quot;longdash&quot;, &quot;dotted&quot;)) + ## Horizontal line for 80% power geom_hline( yintercept = 0.8, color = &quot;grey25&quot;, alpha = 0.8 ) + ## y-axis scale scale_y_continuous( n.breaks = 6 ) + ## Adding labels labs( x = expression(delta), y = &quot;Power&quot;, title = &quot;Power for a 2x2 Design&quot;, linetype = &quot;Effect for...&quot; ) + ## Update some visual settings with the ridges theme ggridges::theme_ridges( font_size = 10, center_axis_labels = TRUE ) + ## Other settings (here: just legend location) theme( legend.position = &quot;bottom&quot; ) Of course, in this simple example, we could still have relied on some reasonable analytical assumptions to arrive at these estimates (see a helpful discussion here). But running a simulation saves us the trouble. 6.4.2 Covariate adjustment with the Lin estimator Another scenario where computational power analysis is worth the investment is if a design calls for covariate adjustment. This is common in OES projects, and, in many instances, the Lin (2013) saturated regression estimator is the solution we choose. Devising an off-the-shelf method to calculate power for such a study is possible, but would likely require investing time doing background research to ensure its accuracy. Alternatively, we could simply replicate, estimate, and evaluate such a design computationally. The results will be roughly just as accurate, without regarding a review of the methods literature. Suppose we have a sample of 1,000 observations and a continuous outcome variable. We wish to assess the effect of some policy intervention on this continuous outcome. Our design calls for randomly assigning only M=100M = 100M=100 individuals to receive the intervention &#x2014; perhaps because it is expensive to implement &#x2014; and the rest to control. In addition to having data on the outcome and on treatment assignment, let&#x2019;s say that we also anticipate obtaining a dataset of covariates for our 1,000 observations. This data contains two variables that are prognostic of the outcome and the treatment effect. We&#x2019;ll call these z1 and z2. The first is a continuous measure and the latter is a binary indicator. Our design calls for adjusting for these covariates to improve the precision of our estimated treatment effect. We can simulate such a design to illustrate the possible benefits of covariate adjustment in terms of improved statistical power. We begin by replicating the data-generating process: rep_data &lt;- replicate_design( N = 1000, z1 = rnorm(N, sd = 3), # Continuous covariate z2 = rbinom(N, 1, 0.25), # Binary covariate cz1 = z1 - mean(z1), # Mean centered versions of the covariates cz2 = z2 - mean(z2), x = complete_ra(N, m = N / 10), # Randomly assign 10% to treatment y = ((z1 + z2) * x) + (0.8 * z1) - (1 * z2) + rnorm(N) # Simulate Y ) We then estimate and evaluate. For comparison, power is computed (1) with covariate adjustment via the Lin estimator, (2) without covariate adjustment, and (3) with standard linear, additive covariate adjustment: ## With the Lin Estimator lin_adjust &lt;- rep_data %&gt;% estimate( form = y ~ x + z1 + z2 + x:cz1 + x:cz2, vars = &quot;x&quot; ) %&gt;% evaluate_power( delta = seq(0, 0.5, len = 200) ) ## With no covariate adjustment no_adjust &lt;- rep_data %&gt;% estimate( form = y ~ x, vars = &quot;x&quot; ) %&gt;% evaluate_power( delta = seq(0, 0.5, len = 200) ) ## With linear, additive covariate adjustment standard_adjust &lt;- rep_data %&gt;% estimate( form = y ~ x + z1 + z2, vars = &quot;x&quot; ) %&gt;% evaluate_power( delta = seq(0, 0.5, len = 200) ) We can now compare results under these alternative empirical strategies. Figure 3 shows the power curves for each approach. The Lin estimator provides substantial improvements in power over both no covariate adjustment and linear additive adjustment.29 And it only took a few lines of code to get this result! ## Combine the results, and apply similar plotting code to above bind_rows( lin_adjust %&gt;% mutate(Method = &quot;Lin&quot;), no_adjust %&gt;% mutate(Method = &quot;No Covariates&quot;), standard_adjust %&gt;% mutate(Method = &quot;Additive&quot;) ) %&gt;% ggplot() + geom_line( aes(delta, power, linetype = Method) ) + scale_linetype_manual(values = c(&quot;solid&quot;, &quot;longdash&quot;, &quot;dotted&quot;)) + geom_hline( yintercept = 0.8, color = &quot;grey25&quot;, alpha = 0.8 ) + scale_y_continuous( n.breaks = 6 ) + labs( x = expression(delta), y = &quot;Power&quot;, title = &quot;Power with Lin Adjustment&quot;, linetype = &quot;Method:&quot; ) + ggridges::theme_ridges( font_size = 10, center_axis_labels = TRUE ) + theme( legend.position = &quot;bottom&quot; ) 6.4.3 Incorporating DeclareDesign into OES Power Tools We can also use DeclareDesign within this Replicate, Estimate, Evaluate framework. This involves using DeclareDesign to draw estimates, and then feeding the results into the OES evaluate_power() function. We compare the DeclareDesign approach to the OES Replicate and Estimate steps below. First, we simulate a simple design with the OES tools introduced above: eval &lt;- replicate_design( R = 1000, N = 100, Y = rnorm(N), Z = rbinom(N, 1, 0.5) ) %&gt;% estimate( form = Y ~ Z, vars = &quot;Z&quot; ) %&gt;% evaluate_power( delta = seq(0, 0.6, len = 10) ) Then, we do the same with DeclareDesign, declaring a population, potential outcomes, assignments, a target quantity of interest, and an estimator: design &lt;- declare_population( N = 100, U = rnorm(N), potential_outcomes(Y ~ U) ) + declare_assignment(Z = simple_ra(N, prob = 0.5)) + declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) + declare_measurement(Y = reveal_outcomes(Y ~ Z)) + declare_estimator( Y ~ Z, inquiry = &quot;ATE&quot;, .method = lm_robust ) We then use draws from this design within the OES tools: dd_eval &lt;- replicate( n = 1000, expr = draw_estimates(design) %&gt;% list ) %&gt;% bind_rows() %&gt;% evaluate_power( delta = seq(0, 0.6, len = 10) ) We show the similarity between the two approaches to generating the simulated data in the figure below: bind_rows( eval %&gt;% mutate(method = &quot;OES Power Tools&quot;), dd_eval %&gt;% mutate(method = &quot;DeclareDesign&quot;) ) %&gt;% ggplot() + geom_line( aes(delta, power, linetype = method) ) + scale_linetype_manual(values = c(&quot;solid&quot;, &quot;longdash&quot;)) + labs( x = expression(delta), y = &quot;Power&quot;, linetype = NULL ) + scale_y_continuous( n.breaks = 6 ) + geom_hline( yintercept = 0.8, col = &quot;grey25&quot;, size = 1, alpha = 0.8 ) + ggridges::theme_ridges( center_axis_labels = TRUE, font_size = 10 ) + theme( legend.position = &quot;bottom&quot; ) References "],
["glossary-of-terms.html", "Chapter 7 Glossary of Terms", " Chapter 7 Glossary of Terms Under construction "],
["appendix.html", "Chapter 8 Appendix", " Chapter 8 Appendix Under construction "],
["references.html", "References", " References "]
]
